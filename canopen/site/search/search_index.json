{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Table of Contents About This Documentation Important Information Warranty and Disclaimer Target Group and Qualifications Safety and Warning Notices Documentation Structure Getting Started About This Documentation This documentation provides comprehensive technical information for CANopen Object Dictionary implementation on Q-Drives C7 devices. It covers the complete CANopen protocol implementation, network management, and operational procedures for technicians and engineers working with industrial automation systems. What You'll Find Here Object Dictionary Reference : Complete documentation of all CANopen objects with parameters, data types, and access permissions CANopen Protocol Implementation : Physical layer setup, communication types, network topology, and technical specifications Network Management (NMT) : State machines, startup procedures, error handling, and practical troubleshooting guidance About & Support : Documentation author information, company details, and technical support resources Safety & Legal Information : ESD protection, warranty disclaimers, and qualified personnel requirements CANopen Overview CANopen is a communication protocol based on the CAN (Controller Area Network) bus system, widely used in industrial automation. It provides standardized communication methods for devices in manufacturing, automotive, and other industrial applications. Document Version Information Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6 Important Information Warranty and Disclaimer \u26a0\ufe0f Important Legal Notice Q-Drives GmbH accepts no liability for damage or malfunctions resulting from: - Installation errors - Failure to observe this manual - Improper repairs Responsibility : The selection and use of Q-Drives products is the responsibility of the system designer or end user. Integration : Q-Drives GmbH accepts no responsibility for product integration into end systems. Terms : Our General Terms and Conditions at www.q-drives.com apply to all products and services. Target Group and Qualifications Intended Audience This documentation is designed for technically trained specialists: Development Engineers - System design and implementation Plant Designers - Industrial automation system planning Fitters/Service Personnel - Installation and maintenance Application Engineers - System integration and optimization Required Qualifications Only qualified personnel may install, program and commission these products. Qualified personnel must meet all of the following criteria: \u2705 Training & Experience - Appropriate training in motor control systems - Hands-on experience with industrial automation \u2705 Technical Knowledge - Familiar with and understand this technical manual - Knowledge of CANopen protocol fundamentals \u2705 Regulatory Compliance - Familiar with applicable safety regulations - Understanding of electrical safety standards Safety and Warning Notices Electrostatic Discharge (ESD) Protection \u26a0\ufe0f CAUTION Electronic devices are sensitive to electrostatic discharge. Failure to follow ESD protection measures may result in permanent device damage. Required ESD Protection Measures Personal Protection: - \u2705 Wear grounded wrist strap or ESD protective clothing - \u2705 Use properly grounded, antistatic work surfaces - \u2705 Ensure all tools are ESD-safe and grounded Device Handling: - \u274c Never touch electronic components directly - \u2705 Hold devices only by housing or designated mounting points - \u2705 Avoid unnecessary movement that could cause static buildup - \u2705 Use antistatic packaging for storage and transport Critical Safety Points \u26a0\ufe0f Warning Description Consequence ESD Damage Static discharge can destroy circuits Permanent device failure Improper Installation Incorrect wiring or mounting System malfunction, safety hazard Unauthorized Repairs Modifications by unqualified personnel Loss of warranty, safety risk Documentation Structure This documentation is organized into the following main sections: \ud83d\udcda Core Documentation Section Purpose Target Users Object Dictionary Complete CANopen object reference All users CANopen Protocol Technical protocol implementation details Engineers, System Designers Network Management State machines, startup, and troubleshooting Technicians, Engineers About Documentation author and company information All users \ud83d\udccb Reference Materials Technical Specifications : Detailed parameter lists and data types Error Codes : Complete troubleshooting reference Implementation Examples : Practical usage scenarios \ud83d\udd27 Support Resources Installation Guides : Step-by-step procedures Troubleshooting : Common issues and solutions Best Practices : Recommended implementation approaches Getting Started For First-Time Users \ud83d\udcd6 Read this Introduction - Understand safety requirements and documentation scope \ud83d\udce1 Learn CANopen Protocol - Understand physical layer, network setup, and communication basics \ud83d\udd0d Review Object Dictionary - Familiarize yourself with available parameters and configuration options \u2699\ufe0f Study Network Management - Learn NMT states, startup procedures, and troubleshooting \ud83d\ude80 Implementation - Apply knowledge to your specific application Quick Navigation Need to... Go to... Configure a device Object Dictionary Troubleshoot startup issues Network Management - Error Handling Understand network behavior Network Management - Startup Process Learn CANopen protocol CANopen Protocol Find specific parameters Object Dictionary Technical Support For additional support beyond this documentation: Website : www.q-drives.com Technical Resources : Product-specific documentation and updates Contact : Professional support for implementation assistance Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#table-of-contents","text":"About This Documentation Important Information Warranty and Disclaimer Target Group and Qualifications Safety and Warning Notices Documentation Structure Getting Started","title":"Table of Contents"},{"location":"#about-this-documentation","text":"This documentation provides comprehensive technical information for CANopen Object Dictionary implementation on Q-Drives C7 devices. It covers the complete CANopen protocol implementation, network management, and operational procedures for technicians and engineers working with industrial automation systems.","title":"About This Documentation"},{"location":"#what-youll-find-here","text":"Object Dictionary Reference : Complete documentation of all CANopen objects with parameters, data types, and access permissions CANopen Protocol Implementation : Physical layer setup, communication types, network topology, and technical specifications Network Management (NMT) : State machines, startup procedures, error handling, and practical troubleshooting guidance About & Support : Documentation author information, company details, and technical support resources Safety & Legal Information : ESD protection, warranty disclaimers, and qualified personnel requirements","title":"What You'll Find Here"},{"location":"#canopen-overview","text":"CANopen is a communication protocol based on the CAN (Controller Area Network) bus system, widely used in industrial automation. It provides standardized communication methods for devices in manufacturing, automotive, and other industrial applications.","title":"CANopen Overview"},{"location":"#document-version-information","text":"Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6","title":"Document Version Information"},{"location":"#important-information","text":"","title":"Important Information"},{"location":"#warranty-and-disclaimer","text":"\u26a0\ufe0f Important Legal Notice Q-Drives GmbH accepts no liability for damage or malfunctions resulting from: - Installation errors - Failure to observe this manual - Improper repairs Responsibility : The selection and use of Q-Drives products is the responsibility of the system designer or end user. Integration : Q-Drives GmbH accepts no responsibility for product integration into end systems. Terms : Our General Terms and Conditions at www.q-drives.com apply to all products and services.","title":"Warranty and Disclaimer"},{"location":"#target-group-and-qualifications","text":"","title":"Target Group and Qualifications"},{"location":"#intended-audience","text":"This documentation is designed for technically trained specialists: Development Engineers - System design and implementation Plant Designers - Industrial automation system planning Fitters/Service Personnel - Installation and maintenance Application Engineers - System integration and optimization","title":"Intended Audience"},{"location":"#required-qualifications","text":"Only qualified personnel may install, program and commission these products. Qualified personnel must meet all of the following criteria: \u2705 Training & Experience - Appropriate training in motor control systems - Hands-on experience with industrial automation \u2705 Technical Knowledge - Familiar with and understand this technical manual - Knowledge of CANopen protocol fundamentals \u2705 Regulatory Compliance - Familiar with applicable safety regulations - Understanding of electrical safety standards","title":"Required Qualifications"},{"location":"#safety-and-warning-notices","text":"","title":"Safety and Warning Notices"},{"location":"#electrostatic-discharge-esd-protection","text":"\u26a0\ufe0f CAUTION Electronic devices are sensitive to electrostatic discharge. Failure to follow ESD protection measures may result in permanent device damage.","title":"Electrostatic Discharge (ESD) Protection"},{"location":"#required-esd-protection-measures","text":"Personal Protection: - \u2705 Wear grounded wrist strap or ESD protective clothing - \u2705 Use properly grounded, antistatic work surfaces - \u2705 Ensure all tools are ESD-safe and grounded Device Handling: - \u274c Never touch electronic components directly - \u2705 Hold devices only by housing or designated mounting points - \u2705 Avoid unnecessary movement that could cause static buildup - \u2705 Use antistatic packaging for storage and transport","title":"Required ESD Protection Measures"},{"location":"#critical-safety-points","text":"\u26a0\ufe0f Warning Description Consequence ESD Damage Static discharge can destroy circuits Permanent device failure Improper Installation Incorrect wiring or mounting System malfunction, safety hazard Unauthorized Repairs Modifications by unqualified personnel Loss of warranty, safety risk","title":"Critical Safety Points"},{"location":"#documentation-structure","text":"This documentation is organized into the following main sections:","title":"Documentation Structure"},{"location":"#core-documentation","text":"Section Purpose Target Users Object Dictionary Complete CANopen object reference All users CANopen Protocol Technical protocol implementation details Engineers, System Designers Network Management State machines, startup, and troubleshooting Technicians, Engineers About Documentation author and company information All users","title":"\ud83d\udcda Core Documentation"},{"location":"#reference-materials","text":"Technical Specifications : Detailed parameter lists and data types Error Codes : Complete troubleshooting reference Implementation Examples : Practical usage scenarios","title":"\ud83d\udccb Reference Materials"},{"location":"#support-resources","text":"Installation Guides : Step-by-step procedures Troubleshooting : Common issues and solutions Best Practices : Recommended implementation approaches","title":"\ud83d\udd27 Support Resources"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#for-first-time-users","text":"\ud83d\udcd6 Read this Introduction - Understand safety requirements and documentation scope \ud83d\udce1 Learn CANopen Protocol - Understand physical layer, network setup, and communication basics \ud83d\udd0d Review Object Dictionary - Familiarize yourself with available parameters and configuration options \u2699\ufe0f Study Network Management - Learn NMT states, startup procedures, and troubleshooting \ud83d\ude80 Implementation - Apply knowledge to your specific application","title":"For First-Time Users"},{"location":"#quick-navigation","text":"Need to... Go to... Configure a device Object Dictionary Troubleshoot startup issues Network Management - Error Handling Understand network behavior Network Management - Startup Process Learn CANopen protocol CANopen Protocol Find specific parameters Object Dictionary","title":"Quick Navigation"},{"location":"#technical-support","text":"For additional support beyond this documentation: Website : www.q-drives.com Technical Resources : Product-specific documentation and updates Contact : Professional support for implementation assistance Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Technical Support"},{"location":"about/","text":"About This Documentation Author & Maintenance Documentation Author Andreas Benz Technical Support Engineer Q-Drives GmbH Role & Responsibilities: - Technical documentation development and maintenance - CANopen implementation support - Customer technical assistance - Product specification documentation - Test Engineering Contact Information: - Technical Support : [technik@q-drives.com] - Documentation Feedback : [a.benz@q-drives.com] - Company Website : www.q-drives.com Maintenance Schedule Regular Updates : Documentation updated with firmware releases Version Control : All changes tracked and documented Review Cycle : Technical review with each major firmware update Feedback Integration : User feedback incorporated in updates Company Information About Q-Drives GmbH Q-Drives is a leading manufacturer of intelligent motor controllers and drive solutions for industrial automation applications. Our products combine advanced control algorithms with robust industrial design to deliver reliable performance in demanding environments. Core Competencies: - Brushless DC motor controllers - CANopen and industrial fieldbus integration - Motion control and positioning systems - Custom drive solutions for specialized applications Quality & Standards: - ISO 9001 certified manufacturing - CE marking and industrial safety compliance - RoHS compliant components and processes - Comprehensive testing and validation procedures Support Resources Technical Documentation : Comprehensive manuals and application notes Software Tools : Configuration and diagnostic utilities Training Programs : CANopen implementation workshops Professional Support : Direct access to engineering team Contact Information: - Website : www.q-drives.com - Technical Support : Available through company website - Sales Information : Regional distributors and direct sales - Training : Scheduled workshops and custom training programs Document Information Version History Version Date Author Changes 1.1 15.11.2025 Andreas Benz Initial release Documentation Standards Format : Markdown with MkDocs processing Theme : ReadTheDocs for professional appearance Cross-References : Consistent linking between sections Parameter Format : Standardized object dictionary entries Contributing Guidelines Feedback and Improvements: - Report documentation errors or unclear sections - Suggest additional examples or use cases - Request coverage of specific implementation scenarios - Provide feedback on navigation and usability Quality Standards: - All parameters verified against firmware implementation - Examples tested on actual hardware - Standards compliance verified with official CiA specifications - Regular technical review and validation Legal Information Warranty Disclaimer: Q-Drives GmbH accepts no liability for damage or malfunctions resulting from installation errors, failure to observe documentation, or improper repairs. The selection and use of Q-Drives products is the responsibility of the system designer or end user. Copyright & Usage: - Documentation provided for use with Q-Drives products - Reproduction for commercial purposes requires written permission - Technical specifications subject to change without notice - General Terms and Conditions available at www.q-drives.com Document Information: - Version : 1.1 (Initial Release) - Last Updated : Current - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"About"},{"location":"about/#about-this-documentation","text":"","title":"About This Documentation"},{"location":"about/#author-maintenance","text":"","title":"Author &amp; Maintenance"},{"location":"about/#documentation-author","text":"Andreas Benz Technical Support Engineer Q-Drives GmbH Role & Responsibilities: - Technical documentation development and maintenance - CANopen implementation support - Customer technical assistance - Product specification documentation - Test Engineering Contact Information: - Technical Support : [technik@q-drives.com] - Documentation Feedback : [a.benz@q-drives.com] - Company Website : www.q-drives.com","title":"Documentation Author"},{"location":"about/#maintenance-schedule","text":"Regular Updates : Documentation updated with firmware releases Version Control : All changes tracked and documented Review Cycle : Technical review with each major firmware update Feedback Integration : User feedback incorporated in updates","title":"Maintenance Schedule"},{"location":"about/#company-information","text":"","title":"Company Information"},{"location":"about/#about-q-drives-gmbh","text":"Q-Drives is a leading manufacturer of intelligent motor controllers and drive solutions for industrial automation applications. Our products combine advanced control algorithms with robust industrial design to deliver reliable performance in demanding environments. Core Competencies: - Brushless DC motor controllers - CANopen and industrial fieldbus integration - Motion control and positioning systems - Custom drive solutions for specialized applications Quality & Standards: - ISO 9001 certified manufacturing - CE marking and industrial safety compliance - RoHS compliant components and processes - Comprehensive testing and validation procedures","title":"About Q-Drives GmbH"},{"location":"about/#support-resources","text":"Technical Documentation : Comprehensive manuals and application notes Software Tools : Configuration and diagnostic utilities Training Programs : CANopen implementation workshops Professional Support : Direct access to engineering team Contact Information: - Website : www.q-drives.com - Technical Support : Available through company website - Sales Information : Regional distributors and direct sales - Training : Scheduled workshops and custom training programs","title":"Support Resources"},{"location":"about/#document-information","text":"","title":"Document Information"},{"location":"about/#version-history","text":"Version Date Author Changes 1.1 15.11.2025 Andreas Benz Initial release","title":"Version History"},{"location":"about/#documentation-standards","text":"Format : Markdown with MkDocs processing Theme : ReadTheDocs for professional appearance Cross-References : Consistent linking between sections Parameter Format : Standardized object dictionary entries","title":"Documentation Standards"},{"location":"about/#contributing-guidelines","text":"Feedback and Improvements: - Report documentation errors or unclear sections - Suggest additional examples or use cases - Request coverage of specific implementation scenarios - Provide feedback on navigation and usability Quality Standards: - All parameters verified against firmware implementation - Examples tested on actual hardware - Standards compliance verified with official CiA specifications - Regular technical review and validation","title":"Contributing Guidelines"},{"location":"about/#legal-information","text":"Warranty Disclaimer: Q-Drives GmbH accepts no liability for damage or malfunctions resulting from installation errors, failure to observe documentation, or improper repairs. The selection and use of Q-Drives products is the responsibility of the system designer or end user. Copyright & Usage: - Documentation provided for use with Q-Drives products - Reproduction for commercial purposes requires written permission - Technical specifications subject to change without notice - General Terms and Conditions available at www.q-drives.com Document Information: - Version : 1.1 (Initial Release) - Last Updated : Current - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Legal Information"},{"location":"canopen/","text":"CANopen Protocol Implementation Table of Contents Introduction & Overview What is CANopen? Q-Drives C7 Implementation Standards Compliance Document Version Information Physical Layer & Network Setup CAN Bus Topology Network Termination Bus Length Limitations Stub Lines (Drop Lines) Multiport Taps Cable Requirements CANopen Communication Model Device Model Overview Object Dictionary Structure Communication Types Transmission Types CANopen Objects & Services Network Management (NMT) Service Data Objects (SDO) Process Data Objects (PDO) Synchronization Object (SYNC) Time Stamp Object (TIME) Emergency Object (EMCY) Configuration & Setup Initial Configuration Layer Setting Services (LSS) CANopen FD vs Classic Mode Configuration Storage Technical Specifications Bus Length vs Baud Rate Stub Line Specifications Multiport Tap Specifications Introduction & Overview What is CANopen? CANopen is a widely adopted communication protocol based on the CAN (Controller Area Network) bus system, extensively used in industrial automation applications. It provides standardized communication methods for devices in manufacturing, automotive, and various other industrial environments. Key Characteristics: - Standardized Protocol : Developed by CAN in Automation (CiA) organization - Multi-Master Capability : Supports multiple masters on the same network - Real-Time Communication : Deterministic data exchange for time-critical applications - Robust Design : Differential signaling provides excellent EMI resistance - Scalable Architecture : Supports networks from simple point-to-point to complex multi-node systems Q-Drives C7 Implementation The Q-Drives C7 controller implements CANopen according to industry standards, providing seamless integration with existing industrial automation systems. Implementation Features: - Full CiA 301 Compliance : Complete application layer and communication profile - CiA 402 Device Profile : Specialized for drives and motion control applications - Flexible Configuration : Supports both CANopen Classic and CANopen FD modes - Comprehensive Object Dictionary : Over 100 standardized and manufacturer-specific objects - Multiple PDO Support : Up to 8 independent PDO mappings for efficient data exchange Standards Compliance The C7 controller CANopen implementation adheres to the following international standards: Standard Description Implementation Level CiA 301 CANopen application layer and communication profile Full compliance CiA 402 CANopen device profile for drives and motion control Complete implementation ISO 11898 CAN physical layer specification Hardware compliant EN 50325-4 Industrial communication - CANopen Certified compatible Physical Layer & Network Setup CAN Bus Topology CAN operates as a 2-wire bus system where all participants are connected in parallel. The bus uses differential signaling to achieve excellent noise immunity in industrial environments. Network Architecture node 1 node 2 ... node n | | | |---------|---------------| CAN Bus Line Key Requirements: - Parallel Connection : All devices connect to the same two-wire bus - Differential Signaling : CAN_H and CAN_L provide robust communication - Linear Topology : Avoid star configurations or loops - Proper Termination : Essential for signal integrity Network Termination \u26a0\ufe0f Critical Requirement The CAN bus must be terminated with 120\u03a9 resistors at both ends, regardless of cable length. This termination prevents signal reflections that can cause communication errors. Termination Rules: - \u2705 Required : 120\u03a9 termination at each end of the bus - \u2705 Always Needed : Even for very short cable lengths - \u274c Never : Terminate stub lines or intermediate connections - \u26a0\ufe0f Important : Use precision resistors (1% tolerance recommended) Bus Length Limitations The maximum bus length is primarily limited by signal propagation delay. The CAN multi-master arbitration process requires that signals arrive at all nodes quasi-simultaneously (before sampling within a bit time). Standard Bus Length Specifications Baud Rate Maximum Bus Length Typical Application 1 Mbit/s < 20m High-speed local networks 500 kbit/s < 100m Standard industrial networks 250 kbit/s < 250m Medium-range applications 125 kbit/s < 500m Extended industrial networks 50 kbit/s < 1000m Long-distance applications 20 kbit/s < 2500m Very long networks 10 kbit/s < 5000m Maximum distance applications \ud83d\udcdd Note : Literature often states 40m for 1 Mbit/s networks. However, this doesn't apply to networks with optically isolated CAN controllers. Worst-case calculations with optocouplers yield 5m at 1 Mbit/s, though 20m is typically achievable in practice. \u26a0\ufe0f Important : For bus lengths over 1000m, CAN repeaters may be necessary to maintain signal integrity. Stub Lines (Drop Lines) Stub lines are short cable branches that connect individual devices to the main bus line. While they can cause signal reflections, they are generally acceptable when properly designed. Stub Line Guidelines Reflections from stub lines are typically uncritical if they settle completely before the sampling point. With standard bit timing settings used in bus couplers, the following stub line lengths are permissible: Baud Rate Max Single Stub Length Max Total Stub Length 1 Mbit/s < 1m < 5m 500 kbit/s < 5m < 25m 250 kbit/s < 10m < 50m 125 kbit/s < 20m < 100m 50 kbit/s < 50m < 250m \u26a0\ufe0f Warning : Stub lines must never be terminated with resistors. Multiport Taps When using passive multiport distributors, shorter stub line lengths must be maintained to ensure proper signal integrity. Multiport Tap Specifications Baud Rate Max Stub Length (Multiport) Max Trunk Line Length 1 Mbit/s < 0.3m < 25m 500 kbit/s < 1.2m < 66m 250 kbit/s < 2.4m < 120m 125 kbit/s < 4.8m < 310m Cable Requirements Proper cable selection is crucial for reliable CAN communication. Recommended Cable Specifications Primary Requirements: - Cable Type : Twisted pair, shielded (2x2 conductors) - Characteristic Impedance : 108-132 \u03a9 - Shield : Overall screen for EMI protection - Conductor : Minimum 0.25 mm\u00b2 cross-section Optional Considerations: - CAN Ground Connection : Second pair can be omitted for small networks with common power supply - Cable Length : Consider voltage drop for power-over-bus applications - Environmental Rating : Select appropriate jacket material for installation environment CANopen Communication Model Device Model Overview CANopen consists of a protocol definition (communication profile) and device profiles that standardize data content for specific device classes. This layered approach ensures interoperability between devices from different manufacturers. Architecture Components: - Communication Profile : Protocol definition and message formats - Device Profiles : Standardized data content for device classes - Object Dictionary : Structured parameter and data storage - Communication Objects : Different message types for various purposes Object Dictionary Structure The CANopen device parameters and process data are organized in an Object Dictionary, providing structured access to all device functionality. Object Dictionary Features: - Hierarchical Organization : Objects organized by index and sub-index - Standardized Access : Uniform method for parameter configuration - Data Type Definition : Consistent data representation across devices - Access Control : Read-only, write-only, and read-write permissions \ud83d\udcd6 Reference : For complete Object Dictionary details, see Object Dictionary Communication Types CANopen defines several communication types for input and output data (Process Data Objects): Event-Driven Communication Behavior : Messages sent immediately when data changes Advantage : Efficient bandwidth usage, immediate response Use Case : Status changes, alarm conditions, sporadic data Characteristic : Only changes transmitted, not continuous polling Cyclic Synchronous Communication Behavior : SYNC message triggers synchronized data exchange Advantage : Deterministic timing, coordinated network behavior Use Case : Real-time control applications, coordinated motion Characteristic : All devices synchronized to common time base Polled Communication (On-Demand) Behavior : Data transmitted only when specifically requested Advantage : Full master control over communication timing Use Case : Diagnostic data, configuration parameters Characteristic : Client-server model with explicit requests Transmission Types The desired communication type is configured using the Transmission Type parameter in PDO configuration objects. Configuration Values: - 0 : SYNC-triggered (synchronous) - 1-240 : SYNC with event counter - 254 : Asynchronous event-driven - 255 : Asynchronous polled/on-demand CANopen Objects & Services Network Management (NMT) Network Management follows a master-slave structure requiring one CANopen device to assume the role of CANopen Master, with all other devices operating as NMT Slaves. Network Roles: - NMT Master : Controls network startup, state transitions, error handling - NMT Slaves : Respond to master commands, report status, execute state changes - Node Addressing : Each slave has unique Node-ID in range [1..127] NMT Services Enable: - Device initialization and startup sequencing - Operational state control and monitoring - Device reset and error recovery procedures - Network-wide coordination and synchronization \ud83d\udcd6 Reference : For detailed NMT information, see Network Management Service Data Objects (SDO) A Service Data Object enables read and write access to the Object Dictionary, providing the primary method for device configuration and parameter access. SDO Communication Model: - Server : Owner of the Object Dictionary (typically the device being configured) - Client : CAN node requesting data or initiating writes (typically the master) - Upload : Reading a value from the Object Dictionary - Download : Writing a value to the Object Dictionary Key Features: - Confirmed Service : Every request receives a response - Segmented Transfer : Large data objects transferred in multiple segments - Error Handling : Detailed error codes for troubleshooting - Security : Access permissions enforced at object level Process Data Objects (PDO) A message containing only process data is called a \"Process Data Object\" (PDO). PDOs are designed for data that must be exchanged cyclically or in real-time. PDO Concept: - Efficient Transfer : No overhead information (index, sub-index, length) - Mapping Configuration : Source and destination defined in separate PDO mapping - Real-Time Capability : Optimized for time-critical applications - Multiple Mappings : Up to 8 independent PDO configurations supported PDO Usage Requirements PDOs can only be used when the NMT state machine is in \"Operational\" state. PDO configuration must be performed in \"Pre-Operational\" state. PDO Configuration: - Receive PDOs : Configure processing of incoming PDO messages - Transmit PDOs : Configure transmission of outgoing PDO messages - Mapping Flexibility : Each PDO can carry up to 8 bytes (64 bits) of data - Data Combination : Multiple data types can be combined in single PDO Example Combinations: - Two UNSIGNED32 values - One UNSIGNED32 + one UNSIGNED8 value - Custom combinations up to 8-byte limit Synchronization Object (SYNC) The Synchronization Object enables simultaneous validation of PDO data for all devices on the bus, ensuring coordinated network behavior. SYNC Operation: - Timing Master : One device generates SYNC messages - Network Coordination : All devices synchronize to SYNC timing - Data Consistency : Ensures simultaneous input/output updates - Deterministic Behavior : Critical for real-time control applications Time Stamp Object (TIME) The Time-Stamp object provides network-wide time synchronization for applications requiring coordinated timing. Standard Time Format: - Resolution : Milliseconds after midnight (32-bit field) - Date Reference : Days since January 1, 1984 (16-bit field) - Overflow : System resets on June 7, 2163 High-Resolution Option: For time-critical applications requiring microsecond accuracy: - Resolution : 1 microsecond (32-bit unsigned) - Reset Interval : Counter resets every 72 minutes - Use Case : Precise synchronization in large networks with reduced transmission rates Emergency Object (EMCY) An Emergency message is sent whenever an error occurs in the controller that is not caused by SDO access. This service is unconfirmed and transmitted with CAN-ID 80h + Node-ID. Emergency Characteristics: - Automatic Transmission : Sent immediately when errors occur - Unconfirmed Service : No acknowledgment required - Standard CAN-ID : 0x80 + Node-ID for consistent identification - Error Classification : Provides specific error codes and additional information Configuration & Setup Initial Configuration On first startup, the C7 controller comes pre-configured with default settings that enable immediate network connection for basic applications. Default Configuration: - Node-ID : 1 - Baud Rate : 500 kbit/s - Mode : CANopen Classic (standard mode) - PDO Configuration : Basic transmit/receive PDOs enabled Layer Setting Services (LSS) If you need to modify the default settings, the Node-ID and bit rate must be configured using LSS (Layer Setting Services). LSS Capabilities: - Node-ID Assignment : Set unique network addresses - Baud Rate Configuration : Adjust communication speed - Network Scan : Discover devices and their current settings - Mass Configuration : Configure multiple devices simultaneously CANopen FD vs Classic Mode The device supports both CANopen Classic and the newer CANopen FD (Flexible Data Rate) modes. Mode Selection Configuration is performed through Object 0x1F50sub2 (Download Program Data - CANopen Configuration): Configuration Data Format: - Byte 0 : FD Mode Flag (0 = Classic, \u22600 = FD mode) - Byte 1 : Node-ID (1-127) - Byte 2 : Baud rate low byte (kbit/s) - Byte 3 : Baud rate high byte (kbit/s) Mode Characteristics Mode Data Rate Frame Size Compatibility CANopen Classic Fixed Up to 8 bytes Full backward compatibility CANopen FD Variable Up to 64 bytes Requires FD-capable network Configuration Storage Once a device is configured, the configuration can be modified through either LSS services or SDO access to object 0x1F50sub2. Storage Process: 1. Configuration Write : New settings written to configuration object 2. Automatic Storage : Configuration automatically saved to non-volatile memory (NVM) 3. Power Cycle Required : Device must be power-cycled to activate new settings 4. Persistent Storage : Settings retained through power cycles \u26a0\ufe0f Important : A power-off/power-on cycle is required to activate new configuration settings. Technical Specifications Bus Length vs Baud Rate Complete specification table for network planning: Baud Rate Maximum Bus Length Signal Propagation Application Type 10 kbit/s 5000m Low-speed long-distance Remote monitoring 20 kbit/s 2500m Extended networks Distributed control 50 kbit/s 1000m Medium-distance Building automation 125 kbit/s 500m Standard industrial Manufacturing lines 250 kbit/s 250m Fast industrial Motion control 500 kbit/s 100m High-speed industrial Real-time control 1 Mbit/s 20m* Maximum speed High-speed local *) With optically isolated controllers. See Bus Length Limitations for details. Stub Line Specifications Detailed stub line requirements for network design: Baud Rate Single Stub Max Total Stubs Max Reflection Time Notes 1 Mbit/s 1m 5m 10ns/m Critical timing 500 kbit/s 5m 25m 25ns/m Standard industrial 250 kbit/s 10m 50m 50ns/m Moderate timing 125 kbit/s 20m 100m 100ns/m Relaxed timing 50 kbit/s 50m 250m 250ns/m Long-distance OK Multiport Tap Specifications When using passive multiport distributors (star topology with passive taps): Baud Rate Stub Length Trunk Length Total Network Distribution 1 Mbit/s 0.3m 25m 30m Very restricted 500 kbit/s 1.2m 66m 78m Limited 250 kbit/s 2.4m 120m 144m Moderate 125 kbit/s 4.8m 310m 362m Extended Reference Links: - Object Dictionary - Complete parameter reference - Network Management - Detailed NMT state machine documentation - Introduction - Safety requirements and getting started External References: - CAN in Automation : http://www.can-cia.org - Q-Drives Support : http://www.q-drives.com Document Information: - Version : 0.1 (Initial Release) - Last Updated : Current - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"CANopen"},{"location":"canopen/#canopen-protocol-implementation","text":"","title":"CANopen Protocol Implementation"},{"location":"canopen/#table-of-contents","text":"Introduction & Overview What is CANopen? Q-Drives C7 Implementation Standards Compliance Document Version Information Physical Layer & Network Setup CAN Bus Topology Network Termination Bus Length Limitations Stub Lines (Drop Lines) Multiport Taps Cable Requirements CANopen Communication Model Device Model Overview Object Dictionary Structure Communication Types Transmission Types CANopen Objects & Services Network Management (NMT) Service Data Objects (SDO) Process Data Objects (PDO) Synchronization Object (SYNC) Time Stamp Object (TIME) Emergency Object (EMCY) Configuration & Setup Initial Configuration Layer Setting Services (LSS) CANopen FD vs Classic Mode Configuration Storage Technical Specifications Bus Length vs Baud Rate Stub Line Specifications Multiport Tap Specifications","title":"Table of Contents"},{"location":"canopen/#introduction-overview","text":"","title":"Introduction &amp; Overview"},{"location":"canopen/#what-is-canopen","text":"CANopen is a widely adopted communication protocol based on the CAN (Controller Area Network) bus system, extensively used in industrial automation applications. It provides standardized communication methods for devices in manufacturing, automotive, and various other industrial environments. Key Characteristics: - Standardized Protocol : Developed by CAN in Automation (CiA) organization - Multi-Master Capability : Supports multiple masters on the same network - Real-Time Communication : Deterministic data exchange for time-critical applications - Robust Design : Differential signaling provides excellent EMI resistance - Scalable Architecture : Supports networks from simple point-to-point to complex multi-node systems","title":"What is CANopen?"},{"location":"canopen/#q-drives-c7-implementation","text":"The Q-Drives C7 controller implements CANopen according to industry standards, providing seamless integration with existing industrial automation systems. Implementation Features: - Full CiA 301 Compliance : Complete application layer and communication profile - CiA 402 Device Profile : Specialized for drives and motion control applications - Flexible Configuration : Supports both CANopen Classic and CANopen FD modes - Comprehensive Object Dictionary : Over 100 standardized and manufacturer-specific objects - Multiple PDO Support : Up to 8 independent PDO mappings for efficient data exchange","title":"Q-Drives C7 Implementation"},{"location":"canopen/#standards-compliance","text":"The C7 controller CANopen implementation adheres to the following international standards: Standard Description Implementation Level CiA 301 CANopen application layer and communication profile Full compliance CiA 402 CANopen device profile for drives and motion control Complete implementation ISO 11898 CAN physical layer specification Hardware compliant EN 50325-4 Industrial communication - CANopen Certified compatible","title":"Standards Compliance"},{"location":"canopen/#physical-layer-network-setup","text":"","title":"Physical Layer &amp; Network Setup"},{"location":"canopen/#can-bus-topology","text":"CAN operates as a 2-wire bus system where all participants are connected in parallel. The bus uses differential signaling to achieve excellent noise immunity in industrial environments.","title":"CAN Bus Topology"},{"location":"canopen/#network-architecture","text":"node 1 node 2 ... node n | | | |---------|---------------| CAN Bus Line Key Requirements: - Parallel Connection : All devices connect to the same two-wire bus - Differential Signaling : CAN_H and CAN_L provide robust communication - Linear Topology : Avoid star configurations or loops - Proper Termination : Essential for signal integrity","title":"Network Architecture"},{"location":"canopen/#network-termination","text":"\u26a0\ufe0f Critical Requirement The CAN bus must be terminated with 120\u03a9 resistors at both ends, regardless of cable length. This termination prevents signal reflections that can cause communication errors. Termination Rules: - \u2705 Required : 120\u03a9 termination at each end of the bus - \u2705 Always Needed : Even for very short cable lengths - \u274c Never : Terminate stub lines or intermediate connections - \u26a0\ufe0f Important : Use precision resistors (1% tolerance recommended)","title":"Network Termination"},{"location":"canopen/#bus-length-limitations","text":"The maximum bus length is primarily limited by signal propagation delay. The CAN multi-master arbitration process requires that signals arrive at all nodes quasi-simultaneously (before sampling within a bit time).","title":"Bus Length Limitations"},{"location":"canopen/#standard-bus-length-specifications","text":"Baud Rate Maximum Bus Length Typical Application 1 Mbit/s < 20m High-speed local networks 500 kbit/s < 100m Standard industrial networks 250 kbit/s < 250m Medium-range applications 125 kbit/s < 500m Extended industrial networks 50 kbit/s < 1000m Long-distance applications 20 kbit/s < 2500m Very long networks 10 kbit/s < 5000m Maximum distance applications \ud83d\udcdd Note : Literature often states 40m for 1 Mbit/s networks. However, this doesn't apply to networks with optically isolated CAN controllers. Worst-case calculations with optocouplers yield 5m at 1 Mbit/s, though 20m is typically achievable in practice. \u26a0\ufe0f Important : For bus lengths over 1000m, CAN repeaters may be necessary to maintain signal integrity.","title":"Standard Bus Length Specifications"},{"location":"canopen/#stub-lines-drop-lines","text":"Stub lines are short cable branches that connect individual devices to the main bus line. While they can cause signal reflections, they are generally acceptable when properly designed.","title":"Stub Lines (Drop Lines)"},{"location":"canopen/#stub-line-guidelines","text":"Reflections from stub lines are typically uncritical if they settle completely before the sampling point. With standard bit timing settings used in bus couplers, the following stub line lengths are permissible: Baud Rate Max Single Stub Length Max Total Stub Length 1 Mbit/s < 1m < 5m 500 kbit/s < 5m < 25m 250 kbit/s < 10m < 50m 125 kbit/s < 20m < 100m 50 kbit/s < 50m < 250m \u26a0\ufe0f Warning : Stub lines must never be terminated with resistors.","title":"Stub Line Guidelines"},{"location":"canopen/#multiport-taps","text":"When using passive multiport distributors, shorter stub line lengths must be maintained to ensure proper signal integrity.","title":"Multiport Taps"},{"location":"canopen/#multiport-tap-specifications","text":"Baud Rate Max Stub Length (Multiport) Max Trunk Line Length 1 Mbit/s < 0.3m < 25m 500 kbit/s < 1.2m < 66m 250 kbit/s < 2.4m < 120m 125 kbit/s < 4.8m < 310m","title":"Multiport Tap Specifications"},{"location":"canopen/#cable-requirements","text":"Proper cable selection is crucial for reliable CAN communication.","title":"Cable Requirements"},{"location":"canopen/#recommended-cable-specifications","text":"Primary Requirements: - Cable Type : Twisted pair, shielded (2x2 conductors) - Characteristic Impedance : 108-132 \u03a9 - Shield : Overall screen for EMI protection - Conductor : Minimum 0.25 mm\u00b2 cross-section Optional Considerations: - CAN Ground Connection : Second pair can be omitted for small networks with common power supply - Cable Length : Consider voltage drop for power-over-bus applications - Environmental Rating : Select appropriate jacket material for installation environment","title":"Recommended Cable Specifications"},{"location":"canopen/#canopen-communication-model","text":"","title":"CANopen Communication Model"},{"location":"canopen/#device-model-overview","text":"CANopen consists of a protocol definition (communication profile) and device profiles that standardize data content for specific device classes. This layered approach ensures interoperability between devices from different manufacturers. Architecture Components: - Communication Profile : Protocol definition and message formats - Device Profiles : Standardized data content for device classes - Object Dictionary : Structured parameter and data storage - Communication Objects : Different message types for various purposes","title":"Device Model Overview"},{"location":"canopen/#object-dictionary-structure","text":"The CANopen device parameters and process data are organized in an Object Dictionary, providing structured access to all device functionality. Object Dictionary Features: - Hierarchical Organization : Objects organized by index and sub-index - Standardized Access : Uniform method for parameter configuration - Data Type Definition : Consistent data representation across devices - Access Control : Read-only, write-only, and read-write permissions \ud83d\udcd6 Reference : For complete Object Dictionary details, see Object Dictionary","title":"Object Dictionary Structure"},{"location":"canopen/#communication-types","text":"CANopen defines several communication types for input and output data (Process Data Objects):","title":"Communication Types"},{"location":"canopen/#event-driven-communication","text":"Behavior : Messages sent immediately when data changes Advantage : Efficient bandwidth usage, immediate response Use Case : Status changes, alarm conditions, sporadic data Characteristic : Only changes transmitted, not continuous polling","title":"Event-Driven Communication"},{"location":"canopen/#cyclic-synchronous-communication","text":"Behavior : SYNC message triggers synchronized data exchange Advantage : Deterministic timing, coordinated network behavior Use Case : Real-time control applications, coordinated motion Characteristic : All devices synchronized to common time base","title":"Cyclic Synchronous Communication"},{"location":"canopen/#polled-communication-on-demand","text":"Behavior : Data transmitted only when specifically requested Advantage : Full master control over communication timing Use Case : Diagnostic data, configuration parameters Characteristic : Client-server model with explicit requests","title":"Polled Communication (On-Demand)"},{"location":"canopen/#transmission-types","text":"The desired communication type is configured using the Transmission Type parameter in PDO configuration objects. Configuration Values: - 0 : SYNC-triggered (synchronous) - 1-240 : SYNC with event counter - 254 : Asynchronous event-driven - 255 : Asynchronous polled/on-demand","title":"Transmission Types"},{"location":"canopen/#canopen-objects-services","text":"","title":"CANopen Objects &amp; Services"},{"location":"canopen/#network-management-nmt","text":"Network Management follows a master-slave structure requiring one CANopen device to assume the role of CANopen Master, with all other devices operating as NMT Slaves. Network Roles: - NMT Master : Controls network startup, state transitions, error handling - NMT Slaves : Respond to master commands, report status, execute state changes - Node Addressing : Each slave has unique Node-ID in range [1..127] NMT Services Enable: - Device initialization and startup sequencing - Operational state control and monitoring - Device reset and error recovery procedures - Network-wide coordination and synchronization \ud83d\udcd6 Reference : For detailed NMT information, see Network Management","title":"Network Management (NMT)"},{"location":"canopen/#service-data-objects-sdo","text":"A Service Data Object enables read and write access to the Object Dictionary, providing the primary method for device configuration and parameter access. SDO Communication Model: - Server : Owner of the Object Dictionary (typically the device being configured) - Client : CAN node requesting data or initiating writes (typically the master) - Upload : Reading a value from the Object Dictionary - Download : Writing a value to the Object Dictionary Key Features: - Confirmed Service : Every request receives a response - Segmented Transfer : Large data objects transferred in multiple segments - Error Handling : Detailed error codes for troubleshooting - Security : Access permissions enforced at object level","title":"Service Data Objects (SDO)"},{"location":"canopen/#process-data-objects-pdo","text":"A message containing only process data is called a \"Process Data Object\" (PDO). PDOs are designed for data that must be exchanged cyclically or in real-time. PDO Concept: - Efficient Transfer : No overhead information (index, sub-index, length) - Mapping Configuration : Source and destination defined in separate PDO mapping - Real-Time Capability : Optimized for time-critical applications - Multiple Mappings : Up to 8 independent PDO configurations supported","title":"Process Data Objects (PDO)"},{"location":"canopen/#pdo-usage-requirements","text":"PDOs can only be used when the NMT state machine is in \"Operational\" state. PDO configuration must be performed in \"Pre-Operational\" state. PDO Configuration: - Receive PDOs : Configure processing of incoming PDO messages - Transmit PDOs : Configure transmission of outgoing PDO messages - Mapping Flexibility : Each PDO can carry up to 8 bytes (64 bits) of data - Data Combination : Multiple data types can be combined in single PDO Example Combinations: - Two UNSIGNED32 values - One UNSIGNED32 + one UNSIGNED8 value - Custom combinations up to 8-byte limit","title":"PDO Usage Requirements"},{"location":"canopen/#synchronization-object-sync","text":"The Synchronization Object enables simultaneous validation of PDO data for all devices on the bus, ensuring coordinated network behavior. SYNC Operation: - Timing Master : One device generates SYNC messages - Network Coordination : All devices synchronize to SYNC timing - Data Consistency : Ensures simultaneous input/output updates - Deterministic Behavior : Critical for real-time control applications","title":"Synchronization Object (SYNC)"},{"location":"canopen/#time-stamp-object-time","text":"The Time-Stamp object provides network-wide time synchronization for applications requiring coordinated timing. Standard Time Format: - Resolution : Milliseconds after midnight (32-bit field) - Date Reference : Days since January 1, 1984 (16-bit field) - Overflow : System resets on June 7, 2163 High-Resolution Option: For time-critical applications requiring microsecond accuracy: - Resolution : 1 microsecond (32-bit unsigned) - Reset Interval : Counter resets every 72 minutes - Use Case : Precise synchronization in large networks with reduced transmission rates","title":"Time Stamp Object (TIME)"},{"location":"canopen/#emergency-object-emcy","text":"An Emergency message is sent whenever an error occurs in the controller that is not caused by SDO access. This service is unconfirmed and transmitted with CAN-ID 80h + Node-ID. Emergency Characteristics: - Automatic Transmission : Sent immediately when errors occur - Unconfirmed Service : No acknowledgment required - Standard CAN-ID : 0x80 + Node-ID for consistent identification - Error Classification : Provides specific error codes and additional information","title":"Emergency Object (EMCY)"},{"location":"canopen/#configuration-setup","text":"","title":"Configuration &amp; Setup"},{"location":"canopen/#initial-configuration","text":"On first startup, the C7 controller comes pre-configured with default settings that enable immediate network connection for basic applications. Default Configuration: - Node-ID : 1 - Baud Rate : 500 kbit/s - Mode : CANopen Classic (standard mode) - PDO Configuration : Basic transmit/receive PDOs enabled","title":"Initial Configuration"},{"location":"canopen/#layer-setting-services-lss","text":"If you need to modify the default settings, the Node-ID and bit rate must be configured using LSS (Layer Setting Services). LSS Capabilities: - Node-ID Assignment : Set unique network addresses - Baud Rate Configuration : Adjust communication speed - Network Scan : Discover devices and their current settings - Mass Configuration : Configure multiple devices simultaneously","title":"Layer Setting Services (LSS)"},{"location":"canopen/#canopen-fd-vs-classic-mode","text":"The device supports both CANopen Classic and the newer CANopen FD (Flexible Data Rate) modes.","title":"CANopen FD vs Classic Mode"},{"location":"canopen/#mode-selection","text":"Configuration is performed through Object 0x1F50sub2 (Download Program Data - CANopen Configuration): Configuration Data Format: - Byte 0 : FD Mode Flag (0 = Classic, \u22600 = FD mode) - Byte 1 : Node-ID (1-127) - Byte 2 : Baud rate low byte (kbit/s) - Byte 3 : Baud rate high byte (kbit/s)","title":"Mode Selection"},{"location":"canopen/#mode-characteristics","text":"Mode Data Rate Frame Size Compatibility CANopen Classic Fixed Up to 8 bytes Full backward compatibility CANopen FD Variable Up to 64 bytes Requires FD-capable network","title":"Mode Characteristics"},{"location":"canopen/#configuration-storage","text":"Once a device is configured, the configuration can be modified through either LSS services or SDO access to object 0x1F50sub2. Storage Process: 1. Configuration Write : New settings written to configuration object 2. Automatic Storage : Configuration automatically saved to non-volatile memory (NVM) 3. Power Cycle Required : Device must be power-cycled to activate new settings 4. Persistent Storage : Settings retained through power cycles \u26a0\ufe0f Important : A power-off/power-on cycle is required to activate new configuration settings.","title":"Configuration Storage"},{"location":"canopen/#technical-specifications","text":"","title":"Technical Specifications"},{"location":"canopen/#bus-length-vs-baud-rate","text":"Complete specification table for network planning: Baud Rate Maximum Bus Length Signal Propagation Application Type 10 kbit/s 5000m Low-speed long-distance Remote monitoring 20 kbit/s 2500m Extended networks Distributed control 50 kbit/s 1000m Medium-distance Building automation 125 kbit/s 500m Standard industrial Manufacturing lines 250 kbit/s 250m Fast industrial Motion control 500 kbit/s 100m High-speed industrial Real-time control 1 Mbit/s 20m* Maximum speed High-speed local *) With optically isolated controllers. See Bus Length Limitations for details.","title":"Bus Length vs Baud Rate"},{"location":"canopen/#stub-line-specifications","text":"Detailed stub line requirements for network design: Baud Rate Single Stub Max Total Stubs Max Reflection Time Notes 1 Mbit/s 1m 5m 10ns/m Critical timing 500 kbit/s 5m 25m 25ns/m Standard industrial 250 kbit/s 10m 50m 50ns/m Moderate timing 125 kbit/s 20m 100m 100ns/m Relaxed timing 50 kbit/s 50m 250m 250ns/m Long-distance OK","title":"Stub Line Specifications"},{"location":"canopen/#multiport-tap-specifications_1","text":"When using passive multiport distributors (star topology with passive taps): Baud Rate Stub Length Trunk Length Total Network Distribution 1 Mbit/s 0.3m 25m 30m Very restricted 500 kbit/s 1.2m 66m 78m Limited 250 kbit/s 2.4m 120m 144m Moderate 125 kbit/s 4.8m 310m 362m Extended Reference Links: - Object Dictionary - Complete parameter reference - Network Management - Detailed NMT state machine documentation - Introduction - Safety requirements and getting started External References: - CAN in Automation : http://www.can-cia.org - Q-Drives Support : http://www.q-drives.com Document Information: - Version : 0.1 (Initial Release) - Last Updated : Current - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Multiport Tap Specifications"},{"location":"introduction/","text":"Introduction Table of Contents About This Documentation Important Information Warranty and Disclaimer Target Group and Qualifications Safety and Warning Notices Documentation Structure Getting Started About This Documentation This documentation provides comprehensive technical information for CANopen Object Dictionary implementation on Q-Drives C7 devices. It covers the complete CANopen protocol implementation, network management, and operational procedures for technicians and engineers working with industrial automation systems. What You'll Find Here Object Dictionary Reference : Complete documentation of all CANopen objects with parameters, data types, and access permissions CANopen Protocol Implementation : Physical layer setup, communication types, network topology, and technical specifications Network Management (NMT) : State machines, startup procedures, error handling, and practical troubleshooting guidance Operation Modes : Detailed documentation of device operation modes, state transitions, and control configurations About & Support : Documentation author information, company details, and technical support resources Safety & Legal Information : ESD protection, warranty disclaimers, and qualified personnel requirements CANopen Overview CANopen is a communication protocol based on the CAN (Controller Area Network) bus system, widely used in industrial automation. It provides standardized communication methods for devices in manufacturing, automotive, and other industrial applications. Document Version Information Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6 Important Information Warranty and Disclaimer \u26a0\ufe0f Important Legal Notice Q-Drives GmbH accepts no liability for damage or malfunctions resulting from: - Installation errors - Failure to observe this manual - Improper repairs Responsibility : The selection and use of Q-Drives products is the responsibility of the system designer or end user. Integration : Q-Drives GmbH accepts no responsibility for product integration into end systems. Terms : Our General Terms and Conditions at www.q-drives.com apply to all products and services. Target Group and Qualifications Intended Audience This documentation is designed for technically trained specialists: Development Engineers - System design and implementation Plant Designers - Industrial automation system planning Fitters/Service Personnel - Installation and maintenance Application Engineers - System integration and optimization Required Qualifications Only qualified personnel may install, program and commission these products. Qualified personnel must meet all of the following criteria: \u2705 Training & Experience - Appropriate training in motor control systems - Hands-on experience with industrial automation \u2705 Technical Knowledge - Familiar with and understand this technical manual - Knowledge of CANopen protocol fundamentals \u2705 Regulatory Compliance - Familiar with applicable safety regulations - Understanding of electrical safety standards Safety and Warning Notices Electrostatic Discharge (ESD) Protection \u26a0\ufe0f CAUTION Electronic devices are sensitive to electrostatic discharge. Failure to follow ESD protection measures may result in permanent device damage. Required ESD Protection Measures Personal Protection: - \u2705 Wear grounded wrist strap or ESD protective clothing - \u2705 Use properly grounded, antistatic work surfaces - \u2705 Ensure all tools are ESD-safe and grounded Device Handling: - \u274c Never touch electronic components directly - \u2705 Hold devices only by housing or designated mounting points - \u2705 Avoid unnecessary movement that could cause static buildup - \u2705 Use antistatic packaging for storage and transport Critical Safety Points \u26a0\ufe0f Warning Description Consequence ESD Damage Static discharge can destroy circuits Permanent device failure Improper Installation Incorrect wiring or mounting System malfunction, safety hazard Unauthorized Repairs Modifications by unqualified personnel Loss of warranty, safety risk Documentation Structure This documentation is organized into the following main sections: \ud83d\udcda Core Documentation Section Purpose Target Users Object Dictionary Complete CANopen object reference All users CANopen Protocol Technical protocol implementation details Engineers, System Designers Network Management State machines, startup, and troubleshooting Technicians, Engineers Operation Modes Device operation modes and control configurations Engineers, Technicians About Documentation author and company information All users \ud83d\udccb Reference Materials Technical Specifications : Detailed parameter lists and data types Error Codes : Complete troubleshooting reference Implementation Examples : Practical usage scenarios \ud83d\udd27 Support Resources Installation Guides : Step-by-step procedures Troubleshooting : Common issues and solutions Best Practices : Recommended implementation approaches Getting Started For First-Time Users \ud83d\udcd6 Read this Introduction - Understand safety requirements and documentation scope \ud83d\udce1 Learn CANopen Protocol - Understand physical layer, network setup, and communication basics \ud83d\udd0d Review Object Dictionary - Familiarize yourself with available parameters and configuration options \u2699\ufe0f Study Network Management - Learn NMT states, startup procedures, and troubleshooting \u2699\ufe0f Study Operation Modes - Learn Operation Modes and how to use them \ud83d\ude80 Implementation - Apply knowledge to your specific application Quick Navigation Need to... Go to... Configure a device Object Dictionary Set up operation modes Operation Modes Troubleshoot startup issues Network Management - Error Handling Understand network behavior Network Management - Startup Process Learn CANopen protocol CANopen Protocol Find specific parameters Object Dictionary Configure control modes Operation Modes Technical Support For additional support beyond this documentation: Website : www.q-drives.com Technical Resources : Product-specific documentation and updates Contact : Professional support for implementation assistance Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#table-of-contents","text":"About This Documentation Important Information Warranty and Disclaimer Target Group and Qualifications Safety and Warning Notices Documentation Structure Getting Started","title":"Table of Contents"},{"location":"introduction/#about-this-documentation","text":"This documentation provides comprehensive technical information for CANopen Object Dictionary implementation on Q-Drives C7 devices. It covers the complete CANopen protocol implementation, network management, and operational procedures for technicians and engineers working with industrial automation systems.","title":"About This Documentation"},{"location":"introduction/#what-youll-find-here","text":"Object Dictionary Reference : Complete documentation of all CANopen objects with parameters, data types, and access permissions CANopen Protocol Implementation : Physical layer setup, communication types, network topology, and technical specifications Network Management (NMT) : State machines, startup procedures, error handling, and practical troubleshooting guidance Operation Modes : Detailed documentation of device operation modes, state transitions, and control configurations About & Support : Documentation author information, company details, and technical support resources Safety & Legal Information : ESD protection, warranty disclaimers, and qualified personnel requirements","title":"What You'll Find Here"},{"location":"introduction/#canopen-overview","text":"CANopen is a communication protocol based on the CAN (Controller Area Network) bus system, widely used in industrial automation. It provides standardized communication methods for devices in manufacturing, automotive, and other industrial applications.","title":"CANopen Overview"},{"location":"introduction/#document-version-information","text":"Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6","title":"Document Version Information"},{"location":"introduction/#important-information","text":"","title":"Important Information"},{"location":"introduction/#warranty-and-disclaimer","text":"\u26a0\ufe0f Important Legal Notice Q-Drives GmbH accepts no liability for damage or malfunctions resulting from: - Installation errors - Failure to observe this manual - Improper repairs Responsibility : The selection and use of Q-Drives products is the responsibility of the system designer or end user. Integration : Q-Drives GmbH accepts no responsibility for product integration into end systems. Terms : Our General Terms and Conditions at www.q-drives.com apply to all products and services.","title":"Warranty and Disclaimer"},{"location":"introduction/#target-group-and-qualifications","text":"","title":"Target Group and Qualifications"},{"location":"introduction/#intended-audience","text":"This documentation is designed for technically trained specialists: Development Engineers - System design and implementation Plant Designers - Industrial automation system planning Fitters/Service Personnel - Installation and maintenance Application Engineers - System integration and optimization","title":"Intended Audience"},{"location":"introduction/#required-qualifications","text":"Only qualified personnel may install, program and commission these products. Qualified personnel must meet all of the following criteria: \u2705 Training & Experience - Appropriate training in motor control systems - Hands-on experience with industrial automation \u2705 Technical Knowledge - Familiar with and understand this technical manual - Knowledge of CANopen protocol fundamentals \u2705 Regulatory Compliance - Familiar with applicable safety regulations - Understanding of electrical safety standards","title":"Required Qualifications"},{"location":"introduction/#safety-and-warning-notices","text":"","title":"Safety and Warning Notices"},{"location":"introduction/#electrostatic-discharge-esd-protection","text":"\u26a0\ufe0f CAUTION Electronic devices are sensitive to electrostatic discharge. Failure to follow ESD protection measures may result in permanent device damage.","title":"Electrostatic Discharge (ESD) Protection"},{"location":"introduction/#required-esd-protection-measures","text":"Personal Protection: - \u2705 Wear grounded wrist strap or ESD protective clothing - \u2705 Use properly grounded, antistatic work surfaces - \u2705 Ensure all tools are ESD-safe and grounded Device Handling: - \u274c Never touch electronic components directly - \u2705 Hold devices only by housing or designated mounting points - \u2705 Avoid unnecessary movement that could cause static buildup - \u2705 Use antistatic packaging for storage and transport","title":"Required ESD Protection Measures"},{"location":"introduction/#critical-safety-points","text":"\u26a0\ufe0f Warning Description Consequence ESD Damage Static discharge can destroy circuits Permanent device failure Improper Installation Incorrect wiring or mounting System malfunction, safety hazard Unauthorized Repairs Modifications by unqualified personnel Loss of warranty, safety risk","title":"Critical Safety Points"},{"location":"introduction/#documentation-structure","text":"This documentation is organized into the following main sections:","title":"Documentation Structure"},{"location":"introduction/#core-documentation","text":"Section Purpose Target Users Object Dictionary Complete CANopen object reference All users CANopen Protocol Technical protocol implementation details Engineers, System Designers Network Management State machines, startup, and troubleshooting Technicians, Engineers Operation Modes Device operation modes and control configurations Engineers, Technicians About Documentation author and company information All users","title":"\ud83d\udcda Core Documentation"},{"location":"introduction/#reference-materials","text":"Technical Specifications : Detailed parameter lists and data types Error Codes : Complete troubleshooting reference Implementation Examples : Practical usage scenarios","title":"\ud83d\udccb Reference Materials"},{"location":"introduction/#support-resources","text":"Installation Guides : Step-by-step procedures Troubleshooting : Common issues and solutions Best Practices : Recommended implementation approaches","title":"\ud83d\udd27 Support Resources"},{"location":"introduction/#getting-started","text":"","title":"Getting Started"},{"location":"introduction/#for-first-time-users","text":"\ud83d\udcd6 Read this Introduction - Understand safety requirements and documentation scope \ud83d\udce1 Learn CANopen Protocol - Understand physical layer, network setup, and communication basics \ud83d\udd0d Review Object Dictionary - Familiarize yourself with available parameters and configuration options \u2699\ufe0f Study Network Management - Learn NMT states, startup procedures, and troubleshooting \u2699\ufe0f Study Operation Modes - Learn Operation Modes and how to use them \ud83d\ude80 Implementation - Apply knowledge to your specific application","title":"For First-Time Users"},{"location":"introduction/#quick-navigation","text":"Need to... Go to... Configure a device Object Dictionary Set up operation modes Operation Modes Troubleshoot startup issues Network Management - Error Handling Understand network behavior Network Management - Startup Process Learn CANopen protocol CANopen Protocol Find specific parameters Object Dictionary Configure control modes Operation Modes","title":"Quick Navigation"},{"location":"introduction/#technical-support","text":"For additional support beyond this documentation: Website : www.q-drives.com Technical Resources : Product-specific documentation and updates Contact : Professional support for implementation assistance Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Technical Support"},{"location":"network-management/","text":"NMT Network Management Table of Contents Introduction & Basic Concepts NMT States Explained State Transitions Startup Process Error Handling & Troubleshooting Practical Operational Guidance Advanced Topics Introduction & Basic Concepts What is NMT (Network Management)? Network Management (NMT) is the core protocol in CANopen that controls the operational state of devices on the network. Think of it as the \"traffic controller\" that manages when devices can communicate and how they behave during startup, operation, and error conditions. Key Roles in CANopen Networks NMT Master - Controls the network startup sequence - Manages state transitions for all devices - Monitors device health and handles errors - Only one NMT Master per network (normally) NMT Slave - Follows commands from the NMT Master - Reports its status and responds to state change requests - Can operate in different states based on master commands Self-Starting Devices - Special devices that can start automatically without master control - Useful for simple networks or specific applications Network Communication Overview CANopen networks operate on a master-slave principle where: - The NMT Master coordinates all network activities - Devices communicate using different protocols (SDO, PDO, NMT) - State management ensures orderly startup and operation - Error handling maintains network reliability Document Version Information Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6 NMT States Explained Every CANopen device operates in one of four main states. Understanding these states is crucial for troubleshooting and maintenance. 1. Initialisation State Purpose : Device startup and hardware initialization What happens : - Device powers up and performs self-tests - Basic hardware initialization occurs - Device prepares to enter Pre-operational state - Minimal communication capability Typical duration : 1-5 seconds Technician notes : - If a device stays in this state too long, check power supply and hardware - Look for hardware faults or initialization failures 2. Pre-operational State Purpose : Configuration and setup phase What happens : - Device can receive SDO (Service Data Object) communications - Configuration parameters can be read/written - PDO (Process Data Object) communication is disabled - Device waits for Start Remote Node command Communication allowed : - \u2705 SDO (configuration data) - \u2705 NMT commands - \u2705 Emergency messages - \u274c PDO (process data) Technician notes : - This is the \"setup\" state - configure parameters here - Device won't send/receive process data until moved to Operational - Check configuration if device won't transition to Operational 3. Operational State Purpose : Normal operation and process data exchange What happens : - Full communication capability active - PDO communication enabled for real-time data exchange - Device performs its intended function - SDO communication still available for monitoring/adjustment Communication allowed : - \u2705 SDO (configuration data) - \u2705 PDO (process data) - \u2705 NMT commands - \u2705 Emergency messages Technician notes : - This is normal operating state for production - Monitor PDO communication for process data flow - Device should remain in this state during normal operation 4. Stopped State Purpose : Error condition or intentional shutdown What happens : - PDO communication disabled - Limited SDO communication (emergency access only) - Device stops performing its function - Used for error conditions or maintenance Communication allowed : - \u2705 NMT commands - \u2705 Emergency messages - \u26a0\ufe0f Limited SDO (emergency only) - \u274c PDO (process data) Technician notes : - Device is non-functional for process data - Investigate why device entered this state - May require reset or error clearing to recover State Transitions Understanding how devices move between states helps with troubleshooting and control. Valid State Transitions Initialisation \u2192 Pre-operational (automatic at startup) Pre-operational \u2192 Operational (Start Remote Node command) Pre-operational \u2192 Stopped (Stop Remote Node command) Operational \u2192 Pre-operational (Enter Pre-operational command) Operational \u2192 Stopped (Stop Remote Node command) Stopped \u2192 Pre-operational (Reset Communication command) Any State \u2192 Initialisation (Reset Node command) Transition Commands Command From State To State Purpose Start Remote Node Pre-operational Operational Begin normal operation Stop Remote Node Pre-operational/Operational Stopped Emergency stop or maintenance Enter Pre-operational Operational Pre-operational Return to configuration mode Reset Communication Stopped Pre-operational Restart communication Reset Node Any Initialisation Complete device restart Automatic Transitions Some transitions happen automatically: - Power-up : Device automatically enters Initialisation, then Pre-operational - Error conditions : Device may automatically enter Stopped state - Bootup message : Sent when entering Pre-operational from Initialisation Startup Process The network startup follows a specific sequence to ensure all devices are properly configured and operational. Master Startup Sequence Power-On and Initialization NMT Master completes its own initialization Checks its configuration for network startup behavior Flying Master Negotiation (if enabled) Multiple master-capable devices negotiate who becomes the active master Highest priority device becomes the NMT Master Other devices become slaves Network Reset (optional) Master may send Reset Communication to all devices Forces all devices to restart their communication Slave Boot Process Master initiates boot process for each configured slave Verifies device identity and configuration Handles mandatory vs. optional devices differently Configuration Check Master verifies each device's configuration May download new configuration if needed Ensures all devices have correct parameters Error Control Setup Master configures heartbeat or node guarding Establishes monitoring for device health Sets up error detection mechanisms Transition to Operational Master commands devices to enter Operational state Can start all devices simultaneously or individually Network becomes fully operational Slave Boot Process For each slave device, the master performs: Device Verification Checks if device is present on network Verifies device type matches expected configuration Confirms vendor ID, product code, and serial number Configuration Management Compares current configuration with expected values Downloads new configuration if needed Performs restore to defaults if required Software Version Check (optional) Verifies application software version Can trigger automatic software updates Ensures all devices run compatible software Error Control Activation Sets up heartbeat monitoring or node guarding Establishes communication monitoring Prepares error detection mechanisms Startup Timing Boot timeout : Default varies, typically 10-30 seconds for mandatory devices Heartbeat setup : Usually 1-5 seconds after configuration Full startup : Can take 30 seconds to several minutes depending on network size Error Handling & Troubleshooting Common Error Status Codes When startup or operation fails, the system generates specific error codes: Code Description Likely Cause Action Required A Device not listed in slave assignment Configuration error Check network configuration B No response to device type request Device offline/faulty Check device power and connection C Wrong device type Incorrect device installed Verify correct device model D Wrong vendor ID Incorrect device installed Check device manufacturer E Heartbeat timeout Communication failure Check network cables and device status F Node guarding timeout Communication failure Verify device operation and network G Configuration objects missing Configuration incomplete Check device configuration H Software update required but not allowed Version mismatch Update software or configuration I Software update failed Download/installation problem Retry update or check device J Configuration download failed Parameter error Verify configuration parameters K Heartbeat failure during startup Communication problem Check network integrity L Device was initially operational Keep-alive conflict Check startup configuration M Wrong product code Incorrect device model Verify device part number N Wrong revision number Software version mismatch Update device software O Wrong serial number Device replacement needed Check device identity Troubleshooting Flowchart Device Not Starting: 1. Check power supply and connections 2. Verify device is configured in master's slave list 3. Check network termination and cables 4. Monitor for bootup messages 5. Review error codes in master diagnostics Communication Problems: 1. Verify baud rate settings match across network 2. Check CAN bus termination (120\u03a9 at each end) 3. Measure bus voltage levels 4. Look for bus conflicts or duplicate node IDs 5. Monitor heartbeat/node guarding status Configuration Issues: 1. Compare actual vs. expected device parameters 2. Check configuration file for errors 3. Verify software versions are compatible 4. Review restore-to-defaults settings 5. Validate device identity parameters Practical Operational Guidance Monitoring Device States Visual Indicators: - Most devices have status LEDs indicating current state - Green = Operational, Red = Error, Yellow = Pre-operational - Flashing patterns may indicate specific conditions Software Monitoring: - Use CANopen configuration tools to monitor states - Check master diagnostics for device status - Monitor heartbeat/node guarding for device health Network Analysis: - CAN bus analyzers show message traffic - Monitor bootup messages during startup - Track state transition commands and responses Normal vs. Abnormal Behavior Normal Startup: - All devices boot within expected timeframe - Configuration verification passes - Devices transition to Operational state - Process data flows correctly Abnormal Conditions: - Extended startup times - Devices stuck in Pre-operational - Repeated error messages - Missing heartbeat signals - Unexpected state transitions Maintenance Procedures Planned Maintenance: 1. Command devices to Pre-operational state 2. Perform required maintenance tasks 3. Verify device operation 4. Return devices to Operational state Device Replacement: 1. Stop affected device or network section 2. Replace device with identical model/configuration 3. Verify device identity parameters 4. Allow normal startup sequence 5. Confirm proper operation Configuration Changes: 1. Move device to Pre-operational state 2. Modify parameters using SDO communication 3. Verify changes are accepted 4. Return to Operational state 5. Test functionality Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Network Management"},{"location":"network-management/#nmt-network-management","text":"","title":"NMT Network Management"},{"location":"network-management/#table-of-contents","text":"Introduction & Basic Concepts NMT States Explained State Transitions Startup Process Error Handling & Troubleshooting Practical Operational Guidance Advanced Topics","title":"Table of Contents"},{"location":"network-management/#introduction-basic-concepts","text":"","title":"Introduction &amp; Basic Concepts"},{"location":"network-management/#what-is-nmt-network-management","text":"Network Management (NMT) is the core protocol in CANopen that controls the operational state of devices on the network. Think of it as the \"traffic controller\" that manages when devices can communicate and how they behave during startup, operation, and error conditions.","title":"What is NMT (Network Management)?"},{"location":"network-management/#key-roles-in-canopen-networks","text":"NMT Master - Controls the network startup sequence - Manages state transitions for all devices - Monitors device health and handles errors - Only one NMT Master per network (normally) NMT Slave - Follows commands from the NMT Master - Reports its status and responds to state change requests - Can operate in different states based on master commands Self-Starting Devices - Special devices that can start automatically without master control - Useful for simple networks or specific applications","title":"Key Roles in CANopen Networks"},{"location":"network-management/#network-communication-overview","text":"CANopen networks operate on a master-slave principle where: - The NMT Master coordinates all network activities - Devices communicate using different protocols (SDO, PDO, NMT) - State management ensures orderly startup and operation - Error handling maintains network reliability","title":"Network Communication Overview"},{"location":"network-management/#document-version-information","text":"Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6","title":"Document Version Information"},{"location":"network-management/#nmt-states-explained","text":"Every CANopen device operates in one of four main states. Understanding these states is crucial for troubleshooting and maintenance.","title":"NMT States Explained"},{"location":"network-management/#1-initialisation-state","text":"Purpose : Device startup and hardware initialization What happens : - Device powers up and performs self-tests - Basic hardware initialization occurs - Device prepares to enter Pre-operational state - Minimal communication capability Typical duration : 1-5 seconds Technician notes : - If a device stays in this state too long, check power supply and hardware - Look for hardware faults or initialization failures","title":"1. Initialisation State"},{"location":"network-management/#2-pre-operational-state","text":"Purpose : Configuration and setup phase What happens : - Device can receive SDO (Service Data Object) communications - Configuration parameters can be read/written - PDO (Process Data Object) communication is disabled - Device waits for Start Remote Node command Communication allowed : - \u2705 SDO (configuration data) - \u2705 NMT commands - \u2705 Emergency messages - \u274c PDO (process data) Technician notes : - This is the \"setup\" state - configure parameters here - Device won't send/receive process data until moved to Operational - Check configuration if device won't transition to Operational","title":"2. Pre-operational State"},{"location":"network-management/#3-operational-state","text":"Purpose : Normal operation and process data exchange What happens : - Full communication capability active - PDO communication enabled for real-time data exchange - Device performs its intended function - SDO communication still available for monitoring/adjustment Communication allowed : - \u2705 SDO (configuration data) - \u2705 PDO (process data) - \u2705 NMT commands - \u2705 Emergency messages Technician notes : - This is normal operating state for production - Monitor PDO communication for process data flow - Device should remain in this state during normal operation","title":"3. Operational State"},{"location":"network-management/#4-stopped-state","text":"Purpose : Error condition or intentional shutdown What happens : - PDO communication disabled - Limited SDO communication (emergency access only) - Device stops performing its function - Used for error conditions or maintenance Communication allowed : - \u2705 NMT commands - \u2705 Emergency messages - \u26a0\ufe0f Limited SDO (emergency only) - \u274c PDO (process data) Technician notes : - Device is non-functional for process data - Investigate why device entered this state - May require reset or error clearing to recover","title":"4. Stopped State"},{"location":"network-management/#state-transitions","text":"Understanding how devices move between states helps with troubleshooting and control.","title":"State Transitions"},{"location":"network-management/#valid-state-transitions","text":"Initialisation \u2192 Pre-operational (automatic at startup) Pre-operational \u2192 Operational (Start Remote Node command) Pre-operational \u2192 Stopped (Stop Remote Node command) Operational \u2192 Pre-operational (Enter Pre-operational command) Operational \u2192 Stopped (Stop Remote Node command) Stopped \u2192 Pre-operational (Reset Communication command) Any State \u2192 Initialisation (Reset Node command)","title":"Valid State Transitions"},{"location":"network-management/#transition-commands","text":"Command From State To State Purpose Start Remote Node Pre-operational Operational Begin normal operation Stop Remote Node Pre-operational/Operational Stopped Emergency stop or maintenance Enter Pre-operational Operational Pre-operational Return to configuration mode Reset Communication Stopped Pre-operational Restart communication Reset Node Any Initialisation Complete device restart","title":"Transition Commands"},{"location":"network-management/#automatic-transitions","text":"Some transitions happen automatically: - Power-up : Device automatically enters Initialisation, then Pre-operational - Error conditions : Device may automatically enter Stopped state - Bootup message : Sent when entering Pre-operational from Initialisation","title":"Automatic Transitions"},{"location":"network-management/#startup-process","text":"The network startup follows a specific sequence to ensure all devices are properly configured and operational.","title":"Startup Process"},{"location":"network-management/#master-startup-sequence","text":"Power-On and Initialization NMT Master completes its own initialization Checks its configuration for network startup behavior Flying Master Negotiation (if enabled) Multiple master-capable devices negotiate who becomes the active master Highest priority device becomes the NMT Master Other devices become slaves Network Reset (optional) Master may send Reset Communication to all devices Forces all devices to restart their communication Slave Boot Process Master initiates boot process for each configured slave Verifies device identity and configuration Handles mandatory vs. optional devices differently Configuration Check Master verifies each device's configuration May download new configuration if needed Ensures all devices have correct parameters Error Control Setup Master configures heartbeat or node guarding Establishes monitoring for device health Sets up error detection mechanisms Transition to Operational Master commands devices to enter Operational state Can start all devices simultaneously or individually Network becomes fully operational","title":"Master Startup Sequence"},{"location":"network-management/#slave-boot-process","text":"For each slave device, the master performs: Device Verification Checks if device is present on network Verifies device type matches expected configuration Confirms vendor ID, product code, and serial number Configuration Management Compares current configuration with expected values Downloads new configuration if needed Performs restore to defaults if required Software Version Check (optional) Verifies application software version Can trigger automatic software updates Ensures all devices run compatible software Error Control Activation Sets up heartbeat monitoring or node guarding Establishes communication monitoring Prepares error detection mechanisms","title":"Slave Boot Process"},{"location":"network-management/#startup-timing","text":"Boot timeout : Default varies, typically 10-30 seconds for mandatory devices Heartbeat setup : Usually 1-5 seconds after configuration Full startup : Can take 30 seconds to several minutes depending on network size","title":"Startup Timing"},{"location":"network-management/#error-handling-troubleshooting","text":"","title":"Error Handling &amp; Troubleshooting"},{"location":"network-management/#common-error-status-codes","text":"When startup or operation fails, the system generates specific error codes: Code Description Likely Cause Action Required A Device not listed in slave assignment Configuration error Check network configuration B No response to device type request Device offline/faulty Check device power and connection C Wrong device type Incorrect device installed Verify correct device model D Wrong vendor ID Incorrect device installed Check device manufacturer E Heartbeat timeout Communication failure Check network cables and device status F Node guarding timeout Communication failure Verify device operation and network G Configuration objects missing Configuration incomplete Check device configuration H Software update required but not allowed Version mismatch Update software or configuration I Software update failed Download/installation problem Retry update or check device J Configuration download failed Parameter error Verify configuration parameters K Heartbeat failure during startup Communication problem Check network integrity L Device was initially operational Keep-alive conflict Check startup configuration M Wrong product code Incorrect device model Verify device part number N Wrong revision number Software version mismatch Update device software O Wrong serial number Device replacement needed Check device identity","title":"Common Error Status Codes"},{"location":"network-management/#troubleshooting-flowchart","text":"Device Not Starting: 1. Check power supply and connections 2. Verify device is configured in master's slave list 3. Check network termination and cables 4. Monitor for bootup messages 5. Review error codes in master diagnostics Communication Problems: 1. Verify baud rate settings match across network 2. Check CAN bus termination (120\u03a9 at each end) 3. Measure bus voltage levels 4. Look for bus conflicts or duplicate node IDs 5. Monitor heartbeat/node guarding status Configuration Issues: 1. Compare actual vs. expected device parameters 2. Check configuration file for errors 3. Verify software versions are compatible 4. Review restore-to-defaults settings 5. Validate device identity parameters","title":"Troubleshooting Flowchart"},{"location":"network-management/#practical-operational-guidance","text":"","title":"Practical Operational Guidance"},{"location":"network-management/#monitoring-device-states","text":"Visual Indicators: - Most devices have status LEDs indicating current state - Green = Operational, Red = Error, Yellow = Pre-operational - Flashing patterns may indicate specific conditions Software Monitoring: - Use CANopen configuration tools to monitor states - Check master diagnostics for device status - Monitor heartbeat/node guarding for device health Network Analysis: - CAN bus analyzers show message traffic - Monitor bootup messages during startup - Track state transition commands and responses","title":"Monitoring Device States"},{"location":"network-management/#normal-vs-abnormal-behavior","text":"Normal Startup: - All devices boot within expected timeframe - Configuration verification passes - Devices transition to Operational state - Process data flows correctly Abnormal Conditions: - Extended startup times - Devices stuck in Pre-operational - Repeated error messages - Missing heartbeat signals - Unexpected state transitions","title":"Normal vs. Abnormal Behavior"},{"location":"network-management/#maintenance-procedures","text":"Planned Maintenance: 1. Command devices to Pre-operational state 2. Perform required maintenance tasks 3. Verify device operation 4. Return devices to Operational state Device Replacement: 1. Stop affected device or network section 2. Replace device with identical model/configuration 3. Verify device identity parameters 4. Allow normal startup sequence 5. Confirm proper operation Configuration Changes: 1. Move device to Pre-operational state 2. Modify parameters using SDO communication 3. Verify changes are accepted 4. Return to Operational state 5. Test functionality Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Maintenance Procedures"},{"location":"object-dictionary/","text":"Object Dictionary Document Version Information Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6 1000 - Device Type DataType: UNSIGNED32 ObjectCode: Array Description: Device type identification Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 1 ro 0 0x01 Device Type UNSIGNED32 0x20192 const 0 1001 - Error Register DataType: UNSIGNED8 ObjectCode: Variable Description: Bitfield with error types This object indicates the current error status of the device. Each bit represents a different error category: Bit Value Error Type Description 0 0x01 Generic error General device error 1 0x02 Current error Current-related error 2 0x04 Voltage error Voltage-related error 3 0x08 Temperature error Temperature-related error 7 0x80 Manufacturer error Manufacturer-specific error Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Error Register UNSIGNED8 - ro 0 1002 - Manufacturer status register DataType: UNSIGNED32 ObjectCode: Variable Description: Manufacturer specific status information Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer status register UNSIGNED32 - ro 1 1003 - Pre-defined error field DataType: UNSIGNED32 ObjectCode: Array Description: Last 8 error history This object stores the last 8 errors that occurred in the device. Error codes indicate different types of faults: Error Code Description 0x1000 Generic error 0x2300 Current error 0x3100 Voltage error 0x4200 Temperature error 0x6100 Device error Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of errors UNSIGNED8 0 rw 0 0x01 Last Error UNSIGNED32 0 ro 0 0x02 2nd Last Error UNSIGNED32 0 ro 0 0x03 3rd Last Error UNSIGNED32 0 ro 0 0x04 4th Last Error UNSIGNED32 0 ro 0 0x05 5th Last Error UNSIGNED32 0 ro 0 0x06 6th Last Error UNSIGNED32 0 ro 0 0x07 7th Last Error UNSIGNED32 0 ro 0 0x08 8th Last Error UNSIGNED32 0 ro 0 1005 - COB ID SYNC DataType: UNSIGNED32 ObjectCode: Variable Description: COB-ID of the synchronization object (SYNC) This object indicates the configured COB-ID of the synchronization object (SYNC) and defines whether the CANopen device generates the SYNC. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 COB ID SYNC UNSIGNED32 0x00000080 rw 0 1006 - Communication cycle period DataType: UNSIGNED32 ObjectCode: Variable Description: SYNC communication cycle period Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Communication cycle period UNSIGNED32 0x00000000 rw 0 1007 - Synchronous window length DataType: UNSIGNED32 ObjectCode: Variable Description: Synchronous PDO transmission window Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Synchronous window length UNSIGNED32 0x00000000 rw 0 1008 - Manufacturer device name DataType: VISIBLE_STRING ObjectCode: Variable Description: Device name string Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer device name VISIBLE_STRING Q-Drives C7 const 0 1009 - Manufacturer hardware version DataType: VISIBLE_STRING ObjectCode: Variable Description: Hardware version string Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer hardware version VISIBLE_STRING - const 0 100a - Manufacturer software version DataType: VISIBLE_STRING ObjectCode: Variable Description: Software version string Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer software version VISIBLE_STRING - const 0 1010 - Store parameters DataType: UNSIGNED32 ObjectCode: Array Description: Save parameters to non-volatile memory The object 0x1010 has to be written with the value \"save\" (0x65766173) to trigger saving, otherwise an error is reported. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Save all parameters UNSIGNED32 - rw 0 0x02 Save communication parameters UNSIGNED32 - rw 0 0x03 Save application parameters UNSIGNED32 - rw 0 0x04 Save manufacturer parameters UNSIGNED32 - rw 0 1011 - Restore default parameters DataType: UNSIGNED32 ObjectCode: Array Description: Restore default parameter values The object 0x1011 has to be written with the value \"load\" (0x64616f6c) to trigger clearing, otherwise an error is reported. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Restore all default parameters UNSIGNED32 - rw 0 0x02 Restore communication default parameters UNSIGNED32 - rw 0 0x03 Restore application default parameters UNSIGNED32 - rw 0 0x04 Restore manufacturer default parameters UNSIGNED32 - rw 0 1014 - COB ID EMCY DataType: UNSIGNED32 ObjectCode: Variable Description: Emergency message COB-ID Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 COB ID EMCY UNSIGNED32 $NODEID+0x80 ro 0 1015 - Inhibit Time Emergency DataType: UNSIGNED16 ObjectCode: Variable Description: Emergency message inhibit time Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Inhibit Time Emergency UNSIGNED16 0x0 rw 0 1017 - Producer Heartbeat Time DataType: UNSIGNED16 ObjectCode: Variable Description: Heartbeat message transmission period Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Producer Heartbeat Time UNSIGNED16 0 rw 0 1018 - Identity Object DataType: UNSIGNED8 ObjectCode: Record Description: Device identification information Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 4 ro 0 0x01 Vendor Id UNSIGNED32 0x5b8 ro 0 0x02 Product Code UNSIGNED32 0xc7 ro 0 0x03 Revision number UNSIGNED32 0x1 ro 0 0x04 Serial number UNSIGNED32 - ro 0 1019 - Synchronous counter overflow value DataType: UNSIGNED8 ObjectCode: Variable Description: SYNC counter overflow limit Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Synchronous counter overflow value UNSIGNED8 0x00 rw 0 1020 - Verify configuration DataType: UNSIGNED32 ObjectCode: Array Description: Configuration verification timestamps Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Configuration date UNSIGNED32 - rw 0 0x02 Configuration time UNSIGNED32 - rw 0 1021 - Store EDS DataType: DOMAIN ObjectCode: Variable Description: Electronic Data Sheet storage Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Store EDS DOMAIN - rw 0 1022 - Store format DataType: UNSIGNED8 ObjectCode: Variable Description: Storage format identifier Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Store format UNSIGNED8 0 ro 0 1029 - Error behaviour DataType: UNSIGNED8 ObjectCode: Array Description: Error handling behavior configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Nr of Error Classes UNSIGNED8 2 ro 0 0x01 Communication Error UNSIGNED8 1 rw 0 0x02 Specific Error Class UNSIGNED8 0 rw 0 1030 - Version information DataType: UNSIGNED32 ObjectCode: Array Description: CiA document implementation list This data object shall list all implemented CiA documents. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Version information 1 UNSIGNED32 - ro 0 0x02 Version information 2 UNSIGNED32 - ro 0 1032 - Active error list DataType: UNSIGNED32 ObjectCode: Array Description: Currently active error events Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Error Event 1 UNSIGNED32 - ro 0 0x02 Error Event 2 UNSIGNED32 - ro 0 0x03 Error Event 3 UNSIGNED32 - ro 0 0x04 Error Event 4 UNSIGNED32 - ro 0 1200 - SDO server parameter DataType: UNSIGNED8 ObjectCode: Record Description: SDO server communication parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 COB-ID client to server UNSIGNED32 $NODEID+0x600 ro 0 0x02 COB-ID server to client UNSIGNED32 $NODEID+0x580 ro 0 1400 - Receive PDO Communication Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Receive PDO 1 communication parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 ro 0 0x01 COB ID UNSIGNED32 $NODEID+0x200 rw 0 0x02 Transmission Type UNSIGNED8 255 rw 0 1600 - Receive PDO Mapping Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Receive PDO 1 mapping parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 rw 0 0x01 Mapping Entry 1 - Controlword UNSIGNED32 0x60400010 rw 0 0x02 Mapping Entry 2 - Target velocity (vl) UNSIGNED32 0x60420010 rw 0 0x03 Mapping Entry 3 - Mode of Operation UNSIGNED32 0x60600008 rw 0 1800 - Transmit PDO Communication Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Transmit PDO 1 communication parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 5 ro 0 0x01 COB ID UNSIGNED32 $NODEID+0x180 rw 0 0x02 Transmission Type UNSIGNED8 255 rw 0 0x03 Inhibit Time UNSIGNED16 0x0000 rw 0 0x04 Compatibility Entry UNSIGNED8 - rw 0 0x05 Event Timer UNSIGNED16 0 rw 0 1a00 - Transmit PDO Mapping Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Transmit PDO 1 mapping parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 rw 0 0x01 Mapping Entry 1 - Statusword UNSIGNED32 0x60410010 rw 0 0x02 Mapping Entry 2 - Actual velocity (vl) UNSIGNED32 0x60440010 rw 0 0x03 Mapping Entry 3 - Modes of Operation Display UNSIGNED32 0x60610008 rw 0 1f50 - Download Program Data DataType: DOMAIN ObjectCode: Array Description: Programming data download Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 ro 0 0x01 Program Area DOMAIN - rw 0 0x02 CANopen Configuration DOMAIN - rw 0 Sub-index Details: - 0x01 - Program Area: Modified X2C application binary - 0x02 - CANopen Configuration: Basic CANopen communication configuration stored in non-volatile memory - Byte 0: FD mode (Flag for CANopen FD or classic mode at startup) - Byte 1: Node-ID (1..127) - Byte 2: Low byte of bitrate in kbps - Byte 3: High byte of bitrate in kbps 1f51 - Program Control DataType: UNSIGNED8 ObjectCode: Array Description: Application program control Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 1 ro 0 0x01 Program Control UNSIGNED8 - rw 0 Control Values: - 0: Stop application - 1: Start application - 2: Erase non-volatile memory (factory reset), optional - 3: Clear application (required state for device becoming programmable) 1f57 - Flash Status Identification DataType: UNSIGNED32 ObjectCode: Array Description: Application flash status Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 1 ro 0 0x01 Flash status identification UNSIGNED32 - ro 0 Status Values: - 0: Valid application - 2: Invalid application 2000 - Hardware Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Hardware configuration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Rshunt REAL32 200e-6 rw 0 0x02 GainCSA INTEGER16 20 rw 0 0x03 IdentCurrent REAL32 5 rw 0 0x04 Enable CAN Termination UNSIGNED8 0 rw 0 Parameter Details: - Rshunt: Shunt resistor value [Ohm] 2001 - Scaling Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Input scaling parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 SpeedLimitAiDi REAL32 3000 rw 0 0x02 AinVoltageForMaxSpeed REAL32 5 rw 0 0x03 AinMinVoltageThreshold REAL32 0.5 rw 0 Parameter Details: - SpeedLimitAiDi: Speed scaling for analog & digital input [rpm] - AinVoltageForMaxSpeed: Voltage scaling for analog input [V] - AinMinVoltageThreshold: Deadband of Ain voltage in V. Voltages below this value are ignored by the controller. 2010 - Motor Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Motor configuration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 PolePairs INTEGER16 5 rw 0 0x02 Bemf REAL32 0.0 rw 0 0x03 RatedSpeed REAL32 4000.0 rw 0 0x04 InvertDirection UNSIGNED8 0 rw 0 2011 - Brake Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Brake control parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 Mode INTEGER16 0 rw 0 0x02 PeakDuty REAL32 1.0 rw 0 0x03 HoldDuty REAL32 0.7 rw 0 0x04 PeakTime REAL32 1.0 rw 0 0x05 BrakeThresholdCurrent REAL32 0.24 rw 0 2012 - Angular Sensor Parameter DataType: UNSIGNED8 ObjectCode: Record Description: Angular sensor configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 SensorType INTEGER16 2 rw 0 0x02 InvertSensor UNSIGNED8 1 rw 0 0x03 AngleOffset REAL32 0.0 rw 0 0x04 AngleCompensation REAL32 1.15 rw 0 0x05 Phi2SpeedFc REAL32 200.0 rw 0 2013 - Encoder Sensor DataType: UNSIGNED8 ObjectCode: Record Description: Encoder sensor parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 Resolution INTEGER16 256 rw 0 0x02 UsePwm UNSIGNED8 1 rw 0 0x03 PwmFrequency REAL32 1000 rw 0 2014 - Hall Sensor DataType: UNSIGNED8 ObjectCode: Record Description: Hall sensor configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 nInterpol REAL32 100 rw 0 0x02 nSync REAL32 5000 rw 0 0x03 Kp REAL32 1 rw 0 0x04 Ki REAL32 10 rw 0 0x05 HallMapping INTEGER8 0 rw 0 Hall Mapping Values: Assign physical hall signals to control inputs. Active when Block commutation is used! - 0: Hall mapping is ABC\u2192ABC - 1: Hall mapping is ABC\u2192CAB - 2: Hall mapping is ABC\u2192BCA - 3: Hall mapping is ABC\u2192CBA - 4: Hall mapping is ABC\u2192BAC - 5: Hall mapping is ABC\u2192ACB - 6: Hall mapping is ABC\u2192inverted(ABC) - 7: Hall mapping is ABC\u2192inverted(CAB) - 8: Hall mapping is ABC\u2192inverted(BCA) - 9: Hall mapping is ABC\u2192inverted(CBA) - 10: Hall mapping is ABC\u2192inverted(BAC) - 11: Hall mapping is ABC\u2192inverted(ACB) 2015 - Sin/Cos Sensor DataType: UNSIGNED8 ObjectCode: Record Description: Sin/Cos sensor configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 7 ro 0 0x01 SensorSetup UNSIGNED8 1 rw 0 0x02 SC_P INTEGER16 1551 rw 0 0x03 SC_N INTEGER16 1551 rw 0 0x04 OffsetSin INTEGER16 1 rw 0 0x05 OffsetCos INTEGER16 1 rw 0 0x06 GainSin REAL32 0.0002442 rw 0 0x07 GainCos REAL32 0.0002442 rw 0 2016 - Temperature Sensor DataType: UNSIGNED8 ObjectCode: Record Description: Temperature sensor readings Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Motor Temperature REAL32 0 rw 0 0x02 PCB Temperature REAL32 0 rw 0 2017 - STO Status DataType: UNSIGNED8 ObjectCode: Record Description: Safe Torque Off (STO) status monitoring Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 STO1 Monitor 12V REAL32 0 rw 0 0x02 STO1 Monitor 48V REAL32 0 rw 0 0x03 STO2 Monitor REAL32 0 rw 0 0x04 STO1 Input UNSIGNED8 0 rw 0 0x05 STO2 Input UNSIGNED8 0 rw 0 2020 - Voltage Limits DataType: UNSIGNED8 ObjectCode: Record Description: DC link voltage limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 DcLinkOv REAL32 57.6 rw 0 0x02 DcLinkUv REAL32 18 rw 0 2021 - Current Limits DataType: UNSIGNED8 ObjectCode: Record Description: Current protection limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 OcFast REAL32 150 rw 0 0x02 OcSlow REAL32 120 rw 0 0x03 OcFastTime REAL32 0.002 rw 0 0x04 OcSlowTime REAL32 0.1 rw 0 0x05 MotorControlCurrentLimit REAL32 10 rw 0 2022 - Temperature Limits DataType: UNSIGNED8 ObjectCode: Record Description: Temperature protection limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 EnMotorTempError UNSIGNED8 0 rw 0 0x02 MotorTempMax REAL32 80.0 rw 0 0x03 PcbTempMax REAL32 80 rw 0 Parameter Details: - MotorTempMax: Motor over temperature limit in \u00b0C 2023 - Control Error Limits DataType: UNSIGNED8 ObjectCode: Record Description: Control loop error limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 AllowedSpeedError REAL32 200 rw 0 0x02 AllowedSpeedErrorTime REAL32 1 rw 0 0x03 AllowedPositionError REAL32 1 rw 0 0x04 AllowedPositionErrorTime REAL32 1 rw 0 2024 - I2t DataType: UNSIGNED8 ObjectCode: Record Description: I\u00b2t current monitoring parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 NominalCurrent REAL32 40 rw 0 0x02 PeakCurrent REAL32 100 rw 0 0x03 PeakCurrentTime REAL32 1 rw 0 2030 - Current Controller DataType: UNSIGNED8 ObjectCode: Record Description: Current controller parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Kp_d REAL32 0.07 rw 0 0x02 Ki_d REAL32 100 rw 0 0x03 Kp_q REAL32 0.07 rw 0 0x04 Ki_q REAL32 100 rw 0 2031 - Speed Controller DataType: UNSIGNED8 ObjectCode: Record Description: Speed controller parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Kp REAL32 0.005 rw 0 0x02 Ki REAL32 0.05 rw 0 0x03 Kd REAL32 0 rw 0 0x04 Fc REAL32 100 rw 0 2032 - Position Controller DataType: UNSIGNED8 ObjectCode: Record Description: Position controller parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Kp REAL32 100 rw 0 0x02 Ki REAL32 100 rw 0 0x03 Kd REAL32 0.5 rw 0 0x04 Fc REAL32 200 rw 0 2033 - Homing DataType: UNSIGNED8 ObjectCode: Record Description: Homing procedure parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 6 ro 0 0x01 SpeedSwitch REAL32 300 rw 0 0x02 SpeedZero REAL32 150 rw 0 0x03 SpeedThreshold REAL32 20 rw 0 0x04 CurrentThreshold REAL32 3 rw 0 0x05 Timeout UNSIGNED16 0 rw 0 0x06 TorqueThreshold UNSIGNED16 0 rw 0 2040 - Control Settings DataType: UNSIGNED8 ObjectCode: Record Description: General control configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 6 ro 0 0x01 DisableControlAtQsp UNSIGNED8 1 rw 0 0x02 DisableControlAtQspDelayTime REAL32 0 rw 0 0x03 DisableControlSpeedThres REAL32 50 rw 0 0x04 ShortMotorWhenPwmOff UNSIGNED8 1 rw 0 0x05 PreChargeMapping INTEGER8 4 rw 0 0x06 ControlMode INTEGER8 0 rw 0 Parameter Values: - PreChargeMapping: - 0: derive from FIState - 1: DI1 is used as reference - 2: DI2 is used as reference - 3: DI3 is used as reference - 4: DI4 is used as reference - 5: DI5 is used as reference - ControlMode: - 0: Sine commutation - 1: Block commutation 2041 - Speed Trajectory DataType: UNSIGNED8 ObjectCode: Record Description: Speed trajectory generation parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 7 ro 0 0x01 acc_delta_speed REAL32 1500 rw 0 0x02 acc_delta_time REAL32 1 rw 0 0x03 dec_delta_speed REAL32 10000 rw 0 0x04 dec_delta_time REAL32 1 rw 0 0x05 JerkMax REAL32 15000 rw 0 0x06 Upper Limit Dead Zone REAL32 0 rw 0 0x07 Lower Limit Dead Zone REAL32 0 rw 0 2042 - Position Trajectory DataType: UNSIGNED8 ObjectCode: Record Description: Position trajectory generation parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Upper Limit Dead Zone REAL32 0 rw 0 0x02 Lower Limit Dead Zone REAL32 0 rw 0 2043 - Input Functions DataType: UNSIGNED8 ObjectCode: Record Description: Digital input function assignments Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 12 ro 0 0x01 Function DI1 INTEGER8 0 rw 0 0x02 Function DI2 INTEGER8 0 rw 0 0x03 Function DI3 INTEGER8 0 rw 0 0x04 Function DI4 INTEGER8 0 rw 0 0x05 Function DI5 INTEGER8 0 rw 0 0x06 Function DI6 INTEGER8 0 rw 0 0x07 Polarity DI1 INTEGER8 0 rw 0 0x08 Polarity DI2 INTEGER8 0 rw 0 0x09 Polarity DI3 INTEGER8 0 rw 0 0x0a Polarity DI4 INTEGER8 0 rw 0 0x0b Polarity DI5 INTEGER8 0 rw 0 0x0c Polarity DI6 INTEGER8 0 rw 0 2044 - Speed Select Table DataType: UNSIGNED8 ObjectCode: Record Description: Predefined speed values for selection Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 16 ro 0 0x01 Speed Select 1 INTEGER16 0 rw 0 0x02 Speed Select 2 INTEGER16 0 rw 0 0x03 Speed Select 3 INTEGER16 0 rw 0 0x04 Speed Select 4 INTEGER16 0 rw 0 0x05 Speed Select 5 INTEGER16 0 rw 0 0x06 Speed Select 6 INTEGER16 0 rw 0 0x07 Speed Select 7 INTEGER16 0 rw 0 0x08 Speed Select 8 INTEGER16 0 rw 0 0x09 Speed Select 9 INTEGER16 0 rw 0 0x0a Speed Select 10 INTEGER16 0 rw 0 0x0b Speed Select 11 INTEGER16 0 rw 0 0x0c Speed Select 12 INTEGER16 0 rw 0 0x0d Speed Select 13 INTEGER16 0 rw 0 0x0e Speed Select 14 INTEGER16 0 rw 0 0x0f Speed Select 15 INTEGER16 0 rw 0 0x10 Speed Select 16 INTEGER16 0 rw 0 2045 - Position Select Table DataType: UNSIGNED8 ObjectCode: Record Description: Predefined position values for selection Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 16 ro 0 0x01 Position Select 1 REAL32 0 rw 0 0x02 Position Select 2 REAL32 0 rw 0 0x03 Position Select 3 REAL32 0 rw 0 0x04 Position Select 4 REAL32 0 rw 0 0x05 Position Select 5 REAL32 0 rw 0 0x06 Position Select 6 REAL32 0 rw 0 0x07 Position Select 7 REAL32 0 rw 0 0x08 Position Select 8 REAL32 0 rw 0 0x09 Position Select 9 REAL32 0 rw 0 0x0a Position Select 10 REAL32 0 rw 0 0x0b Position Select 11 REAL32 0 rw 0 0x0c Position Select 12 REAL32 0 rw 0 0x0d Position Select 13 REAL32 0 rw 0 0x0e Position Select 14 REAL32 0 rw 0 0x0f Position Select 15 REAL32 0 rw 0 0x10 Position Select 16 REAL32 0 rw 0 2046 - Internal Status DataType: UNSIGNED8 ObjectCode: Record Description: Device internal status information Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 18 ro 0 0x01 Total On Time UNSIGNED32 0 ro 0 0x02 Total Errors Occurred UNSIGNED32 0 ro 0 0x03 Error ID 1 UNSIGNED32 0 ro 0 0x04 Error Time 1 UNSIGNED32 0 ro 0 0x05 Error ID 2 UNSIGNED32 0 ro 0 0x06 Error Time 2 UNSIGNED32 0 ro 0 0x07 Error ID 3 UNSIGNED32 0 ro 0 0x08 Error Time 3 UNSIGNED32 0 ro 0 0x09 Error ID 4 UNSIGNED32 0 ro 0 0x0a Error Time 4 UNSIGNED32 0 ro 0 0x0b Error ID 5 UNSIGNED32 0 ro 0 0x0c Error Time 5 UNSIGNED32 0 ro 0 0x0d Error ID 6 UNSIGNED32 0 ro 0 0x0e Error Time 6 UNSIGNED32 0 ro 0 0x0f Error ID 7 UNSIGNED32 0 ro 0 0x10 Error Time 7 UNSIGNED32 0 ro 0 0x11 Error ID 8 UNSIGNED32 0 ro 0 0x12 Error Time 8 UNSIGNED32 0 ro 0 5000 - CANopen Configuration DataType: UNSIGNED8 ObjectCode: Record Description: CANopen communication configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 1 ro 0 0x01 FDMode UNSIGNED8 0 rw 0 6040 - controlword DataType: UNSIGNED16 ObjectCode: Variable Description: Drive control word (CiA 402) Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 controlword UNSIGNED16 - rww 1 6041 - statusword DataType: UNSIGNED16 ObjectCode: Variable Description: Drive status word (CiA 402) Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 statusword UNSIGNED16 - ro 1 6042 - vl_target_velocity DataType: INTEGER16 ObjectCode: Variable Description: Target velocity in velocity mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 vl_target_velocity INTEGER16 0 rww 1 6043 - vl_velocity_demand DataType: INTEGER16 ObjectCode: Variable Description: Velocity demand value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 vl_velocity_demand INTEGER16 - ro 1 6044 - vl_velocity_actual_value DataType: INTEGER16 ObjectCode: Variable Description: Actual velocity value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 vl_velocity_actual_value INTEGER16 - ro 1 6046 - vl_velocity_min_max_amount DataType: UNSIGNED32 ObjectCode: Array Description: Velocity limits for velocity mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 vl_velocity_min_amount UNSIGNED32 0 rww 1 0x02 vl_velocity_max_amount UNSIGNED32 32767 rww 1 6048 - vl_velocity_acceleration DataType: UNSIGNED8 ObjectCode: Record Description: Velocity mode acceleration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 delta_speed UNSIGNED32 - rww 1 0x02 delta_time UNSIGNED16 - rww 1 6049 - vl_velocity_deceleration DataType: UNSIGNED8 ObjectCode: Record Description: Velocity mode deceleration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 delta_speed UNSIGNED32 - rww 1 0x02 delta_time UNSIGNED16 - rww 1 6060 - modes_of_operation DataType: INTEGER8 ObjectCode: Variable Description: Selected operation mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 modes_of_operation INTEGER8 - rww 1 6061 - modes_of_operation_display DataType: INTEGER8 ObjectCode: Variable Description: Current operation mode display Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 modes_of_operation_display INTEGER8 - ro 1 6064 - position_actual_value DataType: INTEGER32 ObjectCode: Variable Description: Actual position value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 position_actual_value INTEGER32 - ro 1 6079 - dc_link_circuit_voltage DataType: UNSIGNED32 ObjectCode: Variable Description: DC link circuit voltage Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 dc_link_circuit_voltage UNSIGNED32 0 ro 1 607a - position_target_value DataType: INTEGER32 ObjectCode: Variable Description: Target position value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 position_target_value INTEGER32 0 rww 1 607c - homing offset DataType: INTEGER32 ObjectCode: Variable Description: Homing offset value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 homing offset INTEGER32 0 rww 1 607d - software position limit DataType: INTEGER32 ObjectCode: Array Description: Software position limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 min position INTEGER32 0 rww 1 0x02 max position INTEGER32 0 rww 1 607f - max profile velocity DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum profile velocity Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max profile velocity UNSIGNED32 0 rw 0 6080 - max motor speed DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum motor speed Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max motor speed UNSIGNED32 0 rw 0 6081 - profile velocity DataType: UNSIGNED32 ObjectCode: Variable Description: Profile velocity for position mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile velocity UNSIGNED32 0 rww 1 6083 - profile acceleration DataType: UNSIGNED32 ObjectCode: Variable Description: Profile acceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile acceleration UNSIGNED32 0 rww 1 6084 - profile deceleration DataType: UNSIGNED32 ObjectCode: Variable Description: Profile deceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile deceleration UNSIGNED32 0 rww 1 6086 - profile type DataType: INTEGER16 ObjectCode: Variable Description: Motion profile type Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile type INTEGER16 0 ro 1 6093 - position factor DataType: UNSIGNED32 ObjectCode: Array Description: Position scaling factors Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 numerator UNSIGNED32 1 rww 1 0x02 feed constant UNSIGNED32 1 rww 1 6094 - velocity encoder factor DataType: UNSIGNED32 ObjectCode: Array Description: Velocity encoder scaling factors Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 numerator UNSIGNED32 1 rww 1 0x02 divisor UNSIGNED32 1 rww 1 6097 - acceleration factor DataType: UNSIGNED32 ObjectCode: Array Description: Acceleration scaling factors Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 numerator UNSIGNED32 1 rww 1 0x02 divisor UNSIGNED32 1 rww 1 6098 - homing method DataType: INTEGER8 ObjectCode: Variable Description: Homing method selection Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 homing method INTEGER8 0 rww 1 6099 - homing speed DataType: UNSIGNED32 ObjectCode: Array Description: Homing speeds Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 speed switch UNSIGNED32 0 ro 1 0x02 speed zero UNSIGNED32 0 ro 1 609a - homing acceleration DataType: UNSIGNED32 ObjectCode: Variable Description: Homing acceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 homing acceleration UNSIGNED32 0 rww 1 60c5 - max acceleration DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum acceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max acceleration UNSIGNED32 0 rw 0 60c6 - max deceleration DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum deceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max deceleration UNSIGNED32 0 rw 0 60e3 - supported homing methods DataType: INTEGER8 ObjectCode: Array Description: List of supported homing methods Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 9 ro 0 0x01 1st supported homing method INTEGER8 -3 ro 0 0x02 2nd supported homing method INTEGER8 -4 ro 0 0x03 3rd supported homing method INTEGER8 17 ro 0 0x04 4th supported homing method INTEGER8 18 ro 0 0x05 5th supported homing method INTEGER8 19 ro 0 0x06 6th supported homing method INTEGER8 20 ro 0 0x07 7th supported homing method INTEGER8 21 ro 0 0x08 8th supported homing method INTEGER8 22 ro 0 0x09 9th supported homing method INTEGER8 37 ro 0 6502 - supported drive modes DataType: UNSIGNED32 ObjectCode: Variable Description: Supported operation modes bit mask Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 supported drive modes UNSIGNED32 0x23 ro 0 Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Object Dictionary"},{"location":"object-dictionary/#object-dictionary","text":"","title":"Object Dictionary"},{"location":"object-dictionary/#document-version-information","text":"Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6","title":"Document Version Information"},{"location":"object-dictionary/#1000-device-type","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Device type identification Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 1 ro 0 0x01 Device Type UNSIGNED32 0x20192 const 0","title":"1000 - Device Type"},{"location":"object-dictionary/#1001-error-register","text":"DataType: UNSIGNED8 ObjectCode: Variable Description: Bitfield with error types This object indicates the current error status of the device. Each bit represents a different error category: Bit Value Error Type Description 0 0x01 Generic error General device error 1 0x02 Current error Current-related error 2 0x04 Voltage error Voltage-related error 3 0x08 Temperature error Temperature-related error 7 0x80 Manufacturer error Manufacturer-specific error Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Error Register UNSIGNED8 - ro 0","title":"1001 - Error Register"},{"location":"object-dictionary/#1002-manufacturer-status-register","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Manufacturer specific status information Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer status register UNSIGNED32 - ro 1","title":"1002 - Manufacturer status register"},{"location":"object-dictionary/#1003-pre-defined-error-field","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Last 8 error history This object stores the last 8 errors that occurred in the device. Error codes indicate different types of faults: Error Code Description 0x1000 Generic error 0x2300 Current error 0x3100 Voltage error 0x4200 Temperature error 0x6100 Device error Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of errors UNSIGNED8 0 rw 0 0x01 Last Error UNSIGNED32 0 ro 0 0x02 2nd Last Error UNSIGNED32 0 ro 0 0x03 3rd Last Error UNSIGNED32 0 ro 0 0x04 4th Last Error UNSIGNED32 0 ro 0 0x05 5th Last Error UNSIGNED32 0 ro 0 0x06 6th Last Error UNSIGNED32 0 ro 0 0x07 7th Last Error UNSIGNED32 0 ro 0 0x08 8th Last Error UNSIGNED32 0 ro 0","title":"1003 - Pre-defined error field"},{"location":"object-dictionary/#1005-cob-id-sync","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: COB-ID of the synchronization object (SYNC) This object indicates the configured COB-ID of the synchronization object (SYNC) and defines whether the CANopen device generates the SYNC. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 COB ID SYNC UNSIGNED32 0x00000080 rw 0","title":"1005 - COB ID SYNC"},{"location":"object-dictionary/#1006-communication-cycle-period","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: SYNC communication cycle period Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Communication cycle period UNSIGNED32 0x00000000 rw 0","title":"1006 - Communication cycle period"},{"location":"object-dictionary/#1007-synchronous-window-length","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Synchronous PDO transmission window Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Synchronous window length UNSIGNED32 0x00000000 rw 0","title":"1007 - Synchronous window length"},{"location":"object-dictionary/#1008-manufacturer-device-name","text":"DataType: VISIBLE_STRING ObjectCode: Variable Description: Device name string Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer device name VISIBLE_STRING Q-Drives C7 const 0","title":"1008 - Manufacturer device name"},{"location":"object-dictionary/#1009-manufacturer-hardware-version","text":"DataType: VISIBLE_STRING ObjectCode: Variable Description: Hardware version string Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer hardware version VISIBLE_STRING - const 0","title":"1009 - Manufacturer hardware version"},{"location":"object-dictionary/#100a-manufacturer-software-version","text":"DataType: VISIBLE_STRING ObjectCode: Variable Description: Software version string Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Manufacturer software version VISIBLE_STRING - const 0","title":"100a - Manufacturer software version"},{"location":"object-dictionary/#1010-store-parameters","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Save parameters to non-volatile memory The object 0x1010 has to be written with the value \"save\" (0x65766173) to trigger saving, otherwise an error is reported. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Save all parameters UNSIGNED32 - rw 0 0x02 Save communication parameters UNSIGNED32 - rw 0 0x03 Save application parameters UNSIGNED32 - rw 0 0x04 Save manufacturer parameters UNSIGNED32 - rw 0","title":"1010 - Store parameters"},{"location":"object-dictionary/#1011-restore-default-parameters","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Restore default parameter values The object 0x1011 has to be written with the value \"load\" (0x64616f6c) to trigger clearing, otherwise an error is reported. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Restore all default parameters UNSIGNED32 - rw 0 0x02 Restore communication default parameters UNSIGNED32 - rw 0 0x03 Restore application default parameters UNSIGNED32 - rw 0 0x04 Restore manufacturer default parameters UNSIGNED32 - rw 0","title":"1011 - Restore default parameters"},{"location":"object-dictionary/#1014-cob-id-emcy","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Emergency message COB-ID Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 COB ID EMCY UNSIGNED32 $NODEID+0x80 ro 0","title":"1014 - COB ID EMCY"},{"location":"object-dictionary/#1015-inhibit-time-emergency","text":"DataType: UNSIGNED16 ObjectCode: Variable Description: Emergency message inhibit time Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Inhibit Time Emergency UNSIGNED16 0x0 rw 0","title":"1015 - Inhibit Time Emergency"},{"location":"object-dictionary/#1017-producer-heartbeat-time","text":"DataType: UNSIGNED16 ObjectCode: Variable Description: Heartbeat message transmission period Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Producer Heartbeat Time UNSIGNED16 0 rw 0","title":"1017 - Producer Heartbeat Time"},{"location":"object-dictionary/#1018-identity-object","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Device identification information Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 4 ro 0 0x01 Vendor Id UNSIGNED32 0x5b8 ro 0 0x02 Product Code UNSIGNED32 0xc7 ro 0 0x03 Revision number UNSIGNED32 0x1 ro 0 0x04 Serial number UNSIGNED32 - ro 0","title":"1018 - Identity Object"},{"location":"object-dictionary/#1019-synchronous-counter-overflow-value","text":"DataType: UNSIGNED8 ObjectCode: Variable Description: SYNC counter overflow limit Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Synchronous counter overflow value UNSIGNED8 0x00 rw 0","title":"1019 - Synchronous counter overflow value"},{"location":"object-dictionary/#1020-verify-configuration","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Configuration verification timestamps Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Configuration date UNSIGNED32 - rw 0 0x02 Configuration time UNSIGNED32 - rw 0","title":"1020 - Verify configuration"},{"location":"object-dictionary/#1021-store-eds","text":"DataType: DOMAIN ObjectCode: Variable Description: Electronic Data Sheet storage Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Store EDS DOMAIN - rw 0","title":"1021 - Store EDS"},{"location":"object-dictionary/#1022-store-format","text":"DataType: UNSIGNED8 ObjectCode: Variable Description: Storage format identifier Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Store format UNSIGNED8 0 ro 0","title":"1022 - Store format"},{"location":"object-dictionary/#1029-error-behaviour","text":"DataType: UNSIGNED8 ObjectCode: Array Description: Error handling behavior configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Nr of Error Classes UNSIGNED8 2 ro 0 0x01 Communication Error UNSIGNED8 1 rw 0 0x02 Specific Error Class UNSIGNED8 0 rw 0","title":"1029 - Error behaviour"},{"location":"object-dictionary/#1030-version-information","text":"DataType: UNSIGNED32 ObjectCode: Array Description: CiA document implementation list This data object shall list all implemented CiA documents. Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Version information 1 UNSIGNED32 - ro 0 0x02 Version information 2 UNSIGNED32 - ro 0","title":"1030 - Version information"},{"location":"object-dictionary/#1032-active-error-list","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Currently active error events Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Error Event 1 UNSIGNED32 - ro 0 0x02 Error Event 2 UNSIGNED32 - ro 0 0x03 Error Event 3 UNSIGNED32 - ro 0 0x04 Error Event 4 UNSIGNED32 - ro 0","title":"1032 - Active error list"},{"location":"object-dictionary/#1200-sdo-server-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: SDO server communication parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 COB-ID client to server UNSIGNED32 $NODEID+0x600 ro 0 0x02 COB-ID server to client UNSIGNED32 $NODEID+0x580 ro 0","title":"1200 - SDO server parameter"},{"location":"object-dictionary/#1400-receive-pdo-communication-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Receive PDO 1 communication parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 ro 0 0x01 COB ID UNSIGNED32 $NODEID+0x200 rw 0 0x02 Transmission Type UNSIGNED8 255 rw 0","title":"1400 - Receive PDO Communication Parameter"},{"location":"object-dictionary/#1600-receive-pdo-mapping-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Receive PDO 1 mapping parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 rw 0 0x01 Mapping Entry 1 - Controlword UNSIGNED32 0x60400010 rw 0 0x02 Mapping Entry 2 - Target velocity (vl) UNSIGNED32 0x60420010 rw 0 0x03 Mapping Entry 3 - Mode of Operation UNSIGNED32 0x60600008 rw 0","title":"1600 - Receive PDO Mapping Parameter"},{"location":"object-dictionary/#1800-transmit-pdo-communication-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Transmit PDO 1 communication parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 5 ro 0 0x01 COB ID UNSIGNED32 $NODEID+0x180 rw 0 0x02 Transmission Type UNSIGNED8 255 rw 0 0x03 Inhibit Time UNSIGNED16 0x0000 rw 0 0x04 Compatibility Entry UNSIGNED8 - rw 0 0x05 Event Timer UNSIGNED16 0 rw 0","title":"1800 - Transmit PDO Communication Parameter"},{"location":"object-dictionary/#1a00-transmit-pdo-mapping-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Transmit PDO 1 mapping parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 rw 0 0x01 Mapping Entry 1 - Statusword UNSIGNED32 0x60410010 rw 0 0x02 Mapping Entry 2 - Actual velocity (vl) UNSIGNED32 0x60440010 rw 0 0x03 Mapping Entry 3 - Modes of Operation Display UNSIGNED32 0x60610008 rw 0","title":"1a00 - Transmit PDO Mapping Parameter"},{"location":"object-dictionary/#1f50-download-program-data","text":"DataType: DOMAIN ObjectCode: Array Description: Programming data download Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 2 ro 0 0x01 Program Area DOMAIN - rw 0 0x02 CANopen Configuration DOMAIN - rw 0 Sub-index Details: - 0x01 - Program Area: Modified X2C application binary - 0x02 - CANopen Configuration: Basic CANopen communication configuration stored in non-volatile memory - Byte 0: FD mode (Flag for CANopen FD or classic mode at startup) - Byte 1: Node-ID (1..127) - Byte 2: Low byte of bitrate in kbps - Byte 3: High byte of bitrate in kbps","title":"1f50 - Download Program Data"},{"location":"object-dictionary/#1f51-program-control","text":"DataType: UNSIGNED8 ObjectCode: Array Description: Application program control Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 1 ro 0 0x01 Program Control UNSIGNED8 - rw 0 Control Values: - 0: Stop application - 1: Start application - 2: Erase non-volatile memory (factory reset), optional - 3: Clear application (required state for device becoming programmable)","title":"1f51 - Program Control"},{"location":"object-dictionary/#1f57-flash-status-identification","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Application flash status Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Number of entries UNSIGNED8 1 ro 0 0x01 Flash status identification UNSIGNED32 - ro 0 Status Values: - 0: Valid application - 2: Invalid application","title":"1f57 - Flash Status Identification"},{"location":"object-dictionary/#2000-hardware-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Hardware configuration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Rshunt REAL32 200e-6 rw 0 0x02 GainCSA INTEGER16 20 rw 0 0x03 IdentCurrent REAL32 5 rw 0 0x04 Enable CAN Termination UNSIGNED8 0 rw 0 Parameter Details: - Rshunt: Shunt resistor value [Ohm]","title":"2000 - Hardware Parameter"},{"location":"object-dictionary/#2001-scaling-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Input scaling parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 SpeedLimitAiDi REAL32 3000 rw 0 0x02 AinVoltageForMaxSpeed REAL32 5 rw 0 0x03 AinMinVoltageThreshold REAL32 0.5 rw 0 Parameter Details: - SpeedLimitAiDi: Speed scaling for analog & digital input [rpm] - AinVoltageForMaxSpeed: Voltage scaling for analog input [V] - AinMinVoltageThreshold: Deadband of Ain voltage in V. Voltages below this value are ignored by the controller.","title":"2001 - Scaling Parameter"},{"location":"object-dictionary/#2010-motor-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Motor configuration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 PolePairs INTEGER16 5 rw 0 0x02 Bemf REAL32 0.0 rw 0 0x03 RatedSpeed REAL32 4000.0 rw 0 0x04 InvertDirection UNSIGNED8 0 rw 0","title":"2010 - Motor Parameter"},{"location":"object-dictionary/#2011-brake-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Brake control parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 Mode INTEGER16 0 rw 0 0x02 PeakDuty REAL32 1.0 rw 0 0x03 HoldDuty REAL32 0.7 rw 0 0x04 PeakTime REAL32 1.0 rw 0 0x05 BrakeThresholdCurrent REAL32 0.24 rw 0","title":"2011 - Brake Parameter"},{"location":"object-dictionary/#2012-angular-sensor-parameter","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Angular sensor configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 SensorType INTEGER16 2 rw 0 0x02 InvertSensor UNSIGNED8 1 rw 0 0x03 AngleOffset REAL32 0.0 rw 0 0x04 AngleCompensation REAL32 1.15 rw 0 0x05 Phi2SpeedFc REAL32 200.0 rw 0","title":"2012 - Angular Sensor Parameter"},{"location":"object-dictionary/#2013-encoder-sensor","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Encoder sensor parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 Resolution INTEGER16 256 rw 0 0x02 UsePwm UNSIGNED8 1 rw 0 0x03 PwmFrequency REAL32 1000 rw 0","title":"2013 - Encoder Sensor"},{"location":"object-dictionary/#2014-hall-sensor","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Hall sensor configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 nInterpol REAL32 100 rw 0 0x02 nSync REAL32 5000 rw 0 0x03 Kp REAL32 1 rw 0 0x04 Ki REAL32 10 rw 0 0x05 HallMapping INTEGER8 0 rw 0 Hall Mapping Values: Assign physical hall signals to control inputs. Active when Block commutation is used! - 0: Hall mapping is ABC\u2192ABC - 1: Hall mapping is ABC\u2192CAB - 2: Hall mapping is ABC\u2192BCA - 3: Hall mapping is ABC\u2192CBA - 4: Hall mapping is ABC\u2192BAC - 5: Hall mapping is ABC\u2192ACB - 6: Hall mapping is ABC\u2192inverted(ABC) - 7: Hall mapping is ABC\u2192inverted(CAB) - 8: Hall mapping is ABC\u2192inverted(BCA) - 9: Hall mapping is ABC\u2192inverted(CBA) - 10: Hall mapping is ABC\u2192inverted(BAC) - 11: Hall mapping is ABC\u2192inverted(ACB)","title":"2014 - Hall Sensor"},{"location":"object-dictionary/#2015-sincos-sensor","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Sin/Cos sensor configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 7 ro 0 0x01 SensorSetup UNSIGNED8 1 rw 0 0x02 SC_P INTEGER16 1551 rw 0 0x03 SC_N INTEGER16 1551 rw 0 0x04 OffsetSin INTEGER16 1 rw 0 0x05 OffsetCos INTEGER16 1 rw 0 0x06 GainSin REAL32 0.0002442 rw 0 0x07 GainCos REAL32 0.0002442 rw 0","title":"2015 - Sin/Cos Sensor"},{"location":"object-dictionary/#2016-temperature-sensor","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Temperature sensor readings Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Motor Temperature REAL32 0 rw 0 0x02 PCB Temperature REAL32 0 rw 0","title":"2016 - Temperature Sensor"},{"location":"object-dictionary/#2017-sto-status","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Safe Torque Off (STO) status monitoring Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 STO1 Monitor 12V REAL32 0 rw 0 0x02 STO1 Monitor 48V REAL32 0 rw 0 0x03 STO2 Monitor REAL32 0 rw 0 0x04 STO1 Input UNSIGNED8 0 rw 0 0x05 STO2 Input UNSIGNED8 0 rw 0","title":"2017 - STO Status"},{"location":"object-dictionary/#2020-voltage-limits","text":"DataType: UNSIGNED8 ObjectCode: Record Description: DC link voltage limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 DcLinkOv REAL32 57.6 rw 0 0x02 DcLinkUv REAL32 18 rw 0","title":"2020 - Voltage Limits"},{"location":"object-dictionary/#2021-current-limits","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Current protection limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 5 ro 0 0x01 OcFast REAL32 150 rw 0 0x02 OcSlow REAL32 120 rw 0 0x03 OcFastTime REAL32 0.002 rw 0 0x04 OcSlowTime REAL32 0.1 rw 0 0x05 MotorControlCurrentLimit REAL32 10 rw 0","title":"2021 - Current Limits"},{"location":"object-dictionary/#2022-temperature-limits","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Temperature protection limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 EnMotorTempError UNSIGNED8 0 rw 0 0x02 MotorTempMax REAL32 80.0 rw 0 0x03 PcbTempMax REAL32 80 rw 0 Parameter Details: - MotorTempMax: Motor over temperature limit in \u00b0C","title":"2022 - Temperature Limits"},{"location":"object-dictionary/#2023-control-error-limits","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Control loop error limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 AllowedSpeedError REAL32 200 rw 0 0x02 AllowedSpeedErrorTime REAL32 1 rw 0 0x03 AllowedPositionError REAL32 1 rw 0 0x04 AllowedPositionErrorTime REAL32 1 rw 0","title":"2023 - Control Error Limits"},{"location":"object-dictionary/#2024-i2t","text":"DataType: UNSIGNED8 ObjectCode: Record Description: I\u00b2t current monitoring parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 3 ro 0 0x01 NominalCurrent REAL32 40 rw 0 0x02 PeakCurrent REAL32 100 rw 0 0x03 PeakCurrentTime REAL32 1 rw 0","title":"2024 - I2t"},{"location":"object-dictionary/#2030-current-controller","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Current controller parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Kp_d REAL32 0.07 rw 0 0x02 Ki_d REAL32 100 rw 0 0x03 Kp_q REAL32 0.07 rw 0 0x04 Ki_q REAL32 100 rw 0","title":"2030 - Current Controller"},{"location":"object-dictionary/#2031-speed-controller","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Speed controller parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Kp REAL32 0.005 rw 0 0x02 Ki REAL32 0.05 rw 0 0x03 Kd REAL32 0 rw 0 0x04 Fc REAL32 100 rw 0","title":"2031 - Speed Controller"},{"location":"object-dictionary/#2032-position-controller","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Position controller parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 4 ro 0 0x01 Kp REAL32 100 rw 0 0x02 Ki REAL32 100 rw 0 0x03 Kd REAL32 0.5 rw 0 0x04 Fc REAL32 200 rw 0","title":"2032 - Position Controller"},{"location":"object-dictionary/#2033-homing","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Homing procedure parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 6 ro 0 0x01 SpeedSwitch REAL32 300 rw 0 0x02 SpeedZero REAL32 150 rw 0 0x03 SpeedThreshold REAL32 20 rw 0 0x04 CurrentThreshold REAL32 3 rw 0 0x05 Timeout UNSIGNED16 0 rw 0 0x06 TorqueThreshold UNSIGNED16 0 rw 0","title":"2033 - Homing"},{"location":"object-dictionary/#2040-control-settings","text":"DataType: UNSIGNED8 ObjectCode: Record Description: General control configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 6 ro 0 0x01 DisableControlAtQsp UNSIGNED8 1 rw 0 0x02 DisableControlAtQspDelayTime REAL32 0 rw 0 0x03 DisableControlSpeedThres REAL32 50 rw 0 0x04 ShortMotorWhenPwmOff UNSIGNED8 1 rw 0 0x05 PreChargeMapping INTEGER8 4 rw 0 0x06 ControlMode INTEGER8 0 rw 0 Parameter Values: - PreChargeMapping: - 0: derive from FIState - 1: DI1 is used as reference - 2: DI2 is used as reference - 3: DI3 is used as reference - 4: DI4 is used as reference - 5: DI5 is used as reference - ControlMode: - 0: Sine commutation - 1: Block commutation","title":"2040 - Control Settings"},{"location":"object-dictionary/#2041-speed-trajectory","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Speed trajectory generation parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 7 ro 0 0x01 acc_delta_speed REAL32 1500 rw 0 0x02 acc_delta_time REAL32 1 rw 0 0x03 dec_delta_speed REAL32 10000 rw 0 0x04 dec_delta_time REAL32 1 rw 0 0x05 JerkMax REAL32 15000 rw 0 0x06 Upper Limit Dead Zone REAL32 0 rw 0 0x07 Lower Limit Dead Zone REAL32 0 rw 0","title":"2041 - Speed Trajectory"},{"location":"object-dictionary/#2042-position-trajectory","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Position trajectory generation parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 Upper Limit Dead Zone REAL32 0 rw 0 0x02 Lower Limit Dead Zone REAL32 0 rw 0","title":"2042 - Position Trajectory"},{"location":"object-dictionary/#2043-input-functions","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Digital input function assignments Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 12 ro 0 0x01 Function DI1 INTEGER8 0 rw 0 0x02 Function DI2 INTEGER8 0 rw 0 0x03 Function DI3 INTEGER8 0 rw 0 0x04 Function DI4 INTEGER8 0 rw 0 0x05 Function DI5 INTEGER8 0 rw 0 0x06 Function DI6 INTEGER8 0 rw 0 0x07 Polarity DI1 INTEGER8 0 rw 0 0x08 Polarity DI2 INTEGER8 0 rw 0 0x09 Polarity DI3 INTEGER8 0 rw 0 0x0a Polarity DI4 INTEGER8 0 rw 0 0x0b Polarity DI5 INTEGER8 0 rw 0 0x0c Polarity DI6 INTEGER8 0 rw 0","title":"2043 - Input Functions"},{"location":"object-dictionary/#2044-speed-select-table","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Predefined speed values for selection Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 16 ro 0 0x01 Speed Select 1 INTEGER16 0 rw 0 0x02 Speed Select 2 INTEGER16 0 rw 0 0x03 Speed Select 3 INTEGER16 0 rw 0 0x04 Speed Select 4 INTEGER16 0 rw 0 0x05 Speed Select 5 INTEGER16 0 rw 0 0x06 Speed Select 6 INTEGER16 0 rw 0 0x07 Speed Select 7 INTEGER16 0 rw 0 0x08 Speed Select 8 INTEGER16 0 rw 0 0x09 Speed Select 9 INTEGER16 0 rw 0 0x0a Speed Select 10 INTEGER16 0 rw 0 0x0b Speed Select 11 INTEGER16 0 rw 0 0x0c Speed Select 12 INTEGER16 0 rw 0 0x0d Speed Select 13 INTEGER16 0 rw 0 0x0e Speed Select 14 INTEGER16 0 rw 0 0x0f Speed Select 15 INTEGER16 0 rw 0 0x10 Speed Select 16 INTEGER16 0 rw 0","title":"2044 - Speed Select Table"},{"location":"object-dictionary/#2045-position-select-table","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Predefined position values for selection Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 16 ro 0 0x01 Position Select 1 REAL32 0 rw 0 0x02 Position Select 2 REAL32 0 rw 0 0x03 Position Select 3 REAL32 0 rw 0 0x04 Position Select 4 REAL32 0 rw 0 0x05 Position Select 5 REAL32 0 rw 0 0x06 Position Select 6 REAL32 0 rw 0 0x07 Position Select 7 REAL32 0 rw 0 0x08 Position Select 8 REAL32 0 rw 0 0x09 Position Select 9 REAL32 0 rw 0 0x0a Position Select 10 REAL32 0 rw 0 0x0b Position Select 11 REAL32 0 rw 0 0x0c Position Select 12 REAL32 0 rw 0 0x0d Position Select 13 REAL32 0 rw 0 0x0e Position Select 14 REAL32 0 rw 0 0x0f Position Select 15 REAL32 0 rw 0 0x10 Position Select 16 REAL32 0 rw 0","title":"2045 - Position Select Table"},{"location":"object-dictionary/#2046-internal-status","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Device internal status information Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 18 ro 0 0x01 Total On Time UNSIGNED32 0 ro 0 0x02 Total Errors Occurred UNSIGNED32 0 ro 0 0x03 Error ID 1 UNSIGNED32 0 ro 0 0x04 Error Time 1 UNSIGNED32 0 ro 0 0x05 Error ID 2 UNSIGNED32 0 ro 0 0x06 Error Time 2 UNSIGNED32 0 ro 0 0x07 Error ID 3 UNSIGNED32 0 ro 0 0x08 Error Time 3 UNSIGNED32 0 ro 0 0x09 Error ID 4 UNSIGNED32 0 ro 0 0x0a Error Time 4 UNSIGNED32 0 ro 0 0x0b Error ID 5 UNSIGNED32 0 ro 0 0x0c Error Time 5 UNSIGNED32 0 ro 0 0x0d Error ID 6 UNSIGNED32 0 ro 0 0x0e Error Time 6 UNSIGNED32 0 ro 0 0x0f Error ID 7 UNSIGNED32 0 ro 0 0x10 Error Time 7 UNSIGNED32 0 ro 0 0x11 Error ID 8 UNSIGNED32 0 ro 0 0x12 Error Time 8 UNSIGNED32 0 ro 0","title":"2046 - Internal Status"},{"location":"object-dictionary/#5000-canopen-configuration","text":"DataType: UNSIGNED8 ObjectCode: Record Description: CANopen communication configuration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 1 ro 0 0x01 FDMode UNSIGNED8 0 rw 0","title":"5000 - CANopen Configuration"},{"location":"object-dictionary/#6040-controlword","text":"DataType: UNSIGNED16 ObjectCode: Variable Description: Drive control word (CiA 402) Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 controlword UNSIGNED16 - rww 1","title":"6040 - controlword"},{"location":"object-dictionary/#6041-statusword","text":"DataType: UNSIGNED16 ObjectCode: Variable Description: Drive status word (CiA 402) Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 statusword UNSIGNED16 - ro 1","title":"6041 - statusword"},{"location":"object-dictionary/#6042-vl_target_velocity","text":"DataType: INTEGER16 ObjectCode: Variable Description: Target velocity in velocity mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 vl_target_velocity INTEGER16 0 rww 1","title":"6042 - vl_target_velocity"},{"location":"object-dictionary/#6043-vl_velocity_demand","text":"DataType: INTEGER16 ObjectCode: Variable Description: Velocity demand value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 vl_velocity_demand INTEGER16 - ro 1","title":"6043 - vl_velocity_demand"},{"location":"object-dictionary/#6044-vl_velocity_actual_value","text":"DataType: INTEGER16 ObjectCode: Variable Description: Actual velocity value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 vl_velocity_actual_value INTEGER16 - ro 1","title":"6044 - vl_velocity_actual_value"},{"location":"object-dictionary/#6046-vl_velocity_min_max_amount","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Velocity limits for velocity mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 vl_velocity_min_amount UNSIGNED32 0 rww 1 0x02 vl_velocity_max_amount UNSIGNED32 32767 rww 1","title":"6046 - vl_velocity_min_max_amount"},{"location":"object-dictionary/#6048-vl_velocity_acceleration","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Velocity mode acceleration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 delta_speed UNSIGNED32 - rww 1 0x02 delta_time UNSIGNED16 - rww 1","title":"6048 - vl_velocity_acceleration"},{"location":"object-dictionary/#6049-vl_velocity_deceleration","text":"DataType: UNSIGNED8 ObjectCode: Record Description: Velocity mode deceleration parameters Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 delta_speed UNSIGNED32 - rww 1 0x02 delta_time UNSIGNED16 - rww 1","title":"6049 - vl_velocity_deceleration"},{"location":"object-dictionary/#6060-modes_of_operation","text":"DataType: INTEGER8 ObjectCode: Variable Description: Selected operation mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 modes_of_operation INTEGER8 - rww 1","title":"6060 - modes_of_operation"},{"location":"object-dictionary/#6061-modes_of_operation_display","text":"DataType: INTEGER8 ObjectCode: Variable Description: Current operation mode display Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 modes_of_operation_display INTEGER8 - ro 1","title":"6061 - modes_of_operation_display"},{"location":"object-dictionary/#6064-position_actual_value","text":"DataType: INTEGER32 ObjectCode: Variable Description: Actual position value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 position_actual_value INTEGER32 - ro 1","title":"6064 - position_actual_value"},{"location":"object-dictionary/#6079-dc_link_circuit_voltage","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: DC link circuit voltage Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 dc_link_circuit_voltage UNSIGNED32 0 ro 1","title":"6079 - dc_link_circuit_voltage"},{"location":"object-dictionary/#607a-position_target_value","text":"DataType: INTEGER32 ObjectCode: Variable Description: Target position value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 position_target_value INTEGER32 0 rww 1","title":"607a - position_target_value"},{"location":"object-dictionary/#607c-homing-offset","text":"DataType: INTEGER32 ObjectCode: Variable Description: Homing offset value Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 homing offset INTEGER32 0 rww 1","title":"607c - homing offset"},{"location":"object-dictionary/#607d-software-position-limit","text":"DataType: INTEGER32 ObjectCode: Array Description: Software position limits Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 min position INTEGER32 0 rww 1 0x02 max position INTEGER32 0 rww 1","title":"607d - software position limit"},{"location":"object-dictionary/#607f-max-profile-velocity","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum profile velocity Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max profile velocity UNSIGNED32 0 rw 0","title":"607f - max profile velocity"},{"location":"object-dictionary/#6080-max-motor-speed","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum motor speed Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max motor speed UNSIGNED32 0 rw 0","title":"6080 - max motor speed"},{"location":"object-dictionary/#6081-profile-velocity","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Profile velocity for position mode Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile velocity UNSIGNED32 0 rww 1","title":"6081 - profile velocity"},{"location":"object-dictionary/#6083-profile-acceleration","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Profile acceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile acceleration UNSIGNED32 0 rww 1","title":"6083 - profile acceleration"},{"location":"object-dictionary/#6084-profile-deceleration","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Profile deceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile deceleration UNSIGNED32 0 rww 1","title":"6084 - profile deceleration"},{"location":"object-dictionary/#6086-profile-type","text":"DataType: INTEGER16 ObjectCode: Variable Description: Motion profile type Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 profile type INTEGER16 0 ro 1","title":"6086 - profile type"},{"location":"object-dictionary/#6093-position-factor","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Position scaling factors Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 numerator UNSIGNED32 1 rww 1 0x02 feed constant UNSIGNED32 1 rww 1","title":"6093 - position factor"},{"location":"object-dictionary/#6094-velocity-encoder-factor","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Velocity encoder scaling factors Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 numerator UNSIGNED32 1 rww 1 0x02 divisor UNSIGNED32 1 rww 1","title":"6094 - velocity encoder factor"},{"location":"object-dictionary/#6097-acceleration-factor","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Acceleration scaling factors Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 ro 0 0x01 numerator UNSIGNED32 1 rww 1 0x02 divisor UNSIGNED32 1 rww 1","title":"6097 - acceleration factor"},{"location":"object-dictionary/#6098-homing-method","text":"DataType: INTEGER8 ObjectCode: Variable Description: Homing method selection Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 homing method INTEGER8 0 rww 1","title":"6098 - homing method"},{"location":"object-dictionary/#6099-homing-speed","text":"DataType: UNSIGNED32 ObjectCode: Array Description: Homing speeds Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 2 const 0 0x01 speed switch UNSIGNED32 0 ro 1 0x02 speed zero UNSIGNED32 0 ro 1","title":"6099 - homing speed"},{"location":"object-dictionary/#609a-homing-acceleration","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Homing acceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 homing acceleration UNSIGNED32 0 rww 1","title":"609a - homing acceleration"},{"location":"object-dictionary/#60c5-max-acceleration","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum acceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max acceleration UNSIGNED32 0 rw 0","title":"60c5 - max acceleration"},{"location":"object-dictionary/#60c6-max-deceleration","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Maximum deceleration Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 max deceleration UNSIGNED32 0 rw 0","title":"60c6 - max deceleration"},{"location":"object-dictionary/#60e3-supported-homing-methods","text":"DataType: INTEGER8 ObjectCode: Array Description: List of supported homing methods Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 Highest sub-index supported UNSIGNED8 9 ro 0 0x01 1st supported homing method INTEGER8 -3 ro 0 0x02 2nd supported homing method INTEGER8 -4 ro 0 0x03 3rd supported homing method INTEGER8 17 ro 0 0x04 4th supported homing method INTEGER8 18 ro 0 0x05 5th supported homing method INTEGER8 19 ro 0 0x06 6th supported homing method INTEGER8 20 ro 0 0x07 7th supported homing method INTEGER8 21 ro 0 0x08 8th supported homing method INTEGER8 22 ro 0 0x09 9th supported homing method INTEGER8 37 ro 0","title":"60e3 - supported homing methods"},{"location":"object-dictionary/#6502-supported-drive-modes","text":"DataType: UNSIGNED32 ObjectCode: Variable Description: Supported operation modes bit mask Sub-Index Parameter Data Type Default Value Access Type PDO Mapping 0x00 supported drive modes UNSIGNED32 0x23 ro 0 Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"6502 - supported drive modes"},{"location":"operation-modes/","text":"Operation Modes Overview The Q-Drives C7 controller supports multiple CANopen operation modes designed for different motion control applications. Each mode provides specific functionality tailored to particular use cases, from simple velocity control to complex multi-axis coordination. Document Version Information Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6 Mode Selection Configuration Objects: - Modes of operation (6060h) : Set the desired operation mode - Modes of operation display (6061h) : Shows the current active mode - Supported drive modes (6502h) : Indicates which modes are available Important Notes: - Mode changes typically require the device to be in Pre-operational state - Not all modes may be supported on every device variant - Check object 6502h to verify available modes before attempting to switch Profile Position - Mode 1 Description Point-to-point positioning with built-in trajectory generation for precise positioning applications. Essential Objects Object Index Description Position target value 607Ah Commanded position (absolute/relative) Profile velocity 6081h Maximum velocity during motion Profile acceleration 6083h Acceleration rate Profile deceleration 6084h Deceleration rate Profile type 6086h Type of trajectory (0=linear, 1=sin\u00b2, etc.) Software position limit 607Dh Min/max position limits Control Sequence Set target position (607Ah) Configure velocity and acceleration parameters Set controlword bit 4 (new set-point) to start motion Monitor statusword bit 10 (target reached) for completion Velocity Mode - Mode 2 Description Simple velocity control with ramp functions, designed for frequency inverter-style applications. Essential Objects Object Index Description vl target velocity 6042h Desired velocity setpoint vl velocity actual value 6044h Current velocity feedback vl velocity acceleration 6048h Acceleration ramp settings vl velocity deceleration 6049h Deceleration ramp settings vl velocity min max amount 6046h Velocity limits Control Bits Bit 4 : Enable ramp (0=other control, 1=ramp follows input) Bit 5 : Unlock ramp (0=locked, 1=follow reference) Bit 6 : Reference ramp (0=zero input, 1=follow reference) Bit 8 : Halt (0=no command, 1=stop motor) Homing Mode - Mode 6 Description Establish absolute position reference using various homing methods. Use Cases Finding machine zero position Establishing absolute coordinate system Initial positioning after power-up Common Homing Methods Method Description -4/-3 Positiv/Netativ Mechanical Limit 17/18 Positiv/Negativ Limit Switch 19/20 Positiv Home Switch 21/22 Negativ Home Switch 37 Homing Current Position Essential Objects Object Index Description Homing method 6098h Selected homing method Home offset 607Ch Offset from home position Homing speeds 6099h Search and zero speeds Homing acceleration 609Ah Acceleration during homing Control Sequence Set homing method (6098h) Configure speeds and acceleration Set controlword bit 4 to start homing Monitor statusword bits 10, 12, 13 for completion/status Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Operation Modes"},{"location":"operation-modes/#operation-modes","text":"","title":"Operation Modes"},{"location":"operation-modes/#overview","text":"The Q-Drives C7 controller supports multiple CANopen operation modes designed for different motion control applications. Each mode provides specific functionality tailored to particular use cases, from simple velocity control to complex multi-axis coordination.","title":"Overview"},{"location":"operation-modes/#document-version-information","text":"Version Date Changes Firmware Version 0.1 15.11.2024 Initial release 2.01.6","title":"Document Version Information"},{"location":"operation-modes/#mode-selection","text":"Configuration Objects: - Modes of operation (6060h) : Set the desired operation mode - Modes of operation display (6061h) : Shows the current active mode - Supported drive modes (6502h) : Indicates which modes are available Important Notes: - Mode changes typically require the device to be in Pre-operational state - Not all modes may be supported on every device variant - Check object 6502h to verify available modes before attempting to switch","title":"Mode Selection"},{"location":"operation-modes/#profile-position-mode-1","text":"","title":"Profile Position - Mode 1"},{"location":"operation-modes/#description","text":"Point-to-point positioning with built-in trajectory generation for precise positioning applications.","title":"Description"},{"location":"operation-modes/#essential-objects","text":"Object Index Description Position target value 607Ah Commanded position (absolute/relative) Profile velocity 6081h Maximum velocity during motion Profile acceleration 6083h Acceleration rate Profile deceleration 6084h Deceleration rate Profile type 6086h Type of trajectory (0=linear, 1=sin\u00b2, etc.) Software position limit 607Dh Min/max position limits","title":"Essential Objects"},{"location":"operation-modes/#control-sequence","text":"Set target position (607Ah) Configure velocity and acceleration parameters Set controlword bit 4 (new set-point) to start motion Monitor statusword bit 10 (target reached) for completion","title":"Control Sequence"},{"location":"operation-modes/#velocity-mode-mode-2","text":"","title":"Velocity Mode - Mode 2"},{"location":"operation-modes/#description_1","text":"Simple velocity control with ramp functions, designed for frequency inverter-style applications.","title":"Description"},{"location":"operation-modes/#essential-objects_1","text":"Object Index Description vl target velocity 6042h Desired velocity setpoint vl velocity actual value 6044h Current velocity feedback vl velocity acceleration 6048h Acceleration ramp settings vl velocity deceleration 6049h Deceleration ramp settings vl velocity min max amount 6046h Velocity limits","title":"Essential Objects"},{"location":"operation-modes/#control-bits","text":"Bit 4 : Enable ramp (0=other control, 1=ramp follows input) Bit 5 : Unlock ramp (0=locked, 1=follow reference) Bit 6 : Reference ramp (0=zero input, 1=follow reference) Bit 8 : Halt (0=no command, 1=stop motor)","title":"Control Bits"},{"location":"operation-modes/#homing-mode-mode-6","text":"","title":"Homing Mode - Mode 6"},{"location":"operation-modes/#description_2","text":"Establish absolute position reference using various homing methods.","title":"Description"},{"location":"operation-modes/#use-cases","text":"Finding machine zero position Establishing absolute coordinate system Initial positioning after power-up","title":"Use Cases"},{"location":"operation-modes/#common-homing-methods","text":"Method Description -4/-3 Positiv/Netativ Mechanical Limit 17/18 Positiv/Negativ Limit Switch 19/20 Positiv Home Switch 21/22 Negativ Home Switch 37 Homing Current Position","title":"Common Homing Methods"},{"location":"operation-modes/#essential-objects_2","text":"Object Index Description Homing method 6098h Selected homing method Home offset 607Ch Offset from home position Homing speeds 6099h Search and zero speeds Homing acceleration 609Ah Acceleration during homing","title":"Essential Objects"},{"location":"operation-modes/#control-sequence_1","text":"Set homing method (6098h) Configure speeds and acceleration Set controlword bit 4 to start homing Monitor statusword bits 10, 12, 13 for completion/status Document Information: - Version : 1.1 - Last Updated : 11.08.2025 - Firmware Compatibility : 2.01.6 and later - Standards : CiA 301, CiA 402 compliant","title":"Control Sequence"}]}